{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Аналитика интернет-магазина. Проработка гипотез для увеличения выручки."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Описание работы.  \n",
    "Необходимо проработать гипотезы для увеличения выручки интернет-магазина.  \n",
    " Работа состоит из двух частей:\n",
    "1. Приоритизация гипотез\n",
    "2. Анализ A/B-теста\n",
    "       "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### План работы:\n",
    "\n",
    "[1. Приоритизация гипотез](#1-bullet)  \n",
    "\n",
    "  [- 1.1. Применение фреймворка ICE](#1.1-bullet)  \n",
    "   [- 1.2. Применение фреймворка RICE](#1.2-bullet)  \n",
    "    [- 1.3. Выводы](#1.3-bullet)\n",
    " \n",
    "[2. Анализ A/B-теста](#2-bullet) \n",
    "\n",
    "  [- 2.1. График кумулятивной выручки по группам. Выводы](#2.1-bullet)  \n",
    "  [- 2.2. График кумулятивного среднего чека по группам. Выводы](#2.2-bullet)  \n",
    "  [- 2.3. График относительного изменения кумулятивного среднего чека группы B к группе A. Выводы](#2.3-bullet)  \n",
    "  [- 2.4. График кумулятивной конверсии по группам. Выводы](#2.4-bullet)  \n",
    "  [- 2.5. График относительного изменения кумулятивной конверсии группы B к группе A. Выводы](#2.5-bullet)  \n",
    "  [- 2.6. Точечный график количества заказов по пользователям. Выводы](#2.6-bullet)  \n",
    "  [- 2.7. Расчет 95го и 99го перцентили количества заказов на пользователя](#2.7-bullet)  \n",
    "  [- 2.8. Точечный график стоимостей заказов. Выводы](#2.8-bullet)  \n",
    "  [- 2.9. Расчет 95го и 99го перцентилей стоимости заказов](#2.9-bullet)  \n",
    "  [- 2.10. Расчет статистической значимости различий в конверсии между группами по «сырым» данным. Выводы](#2.10-bullet)  \n",
    "  [- 2.11. Расчет статистической значимости различий в среднем чеке заказа между группами по «сырым» данным. Выводы](#2.11-bullet)  \n",
    "  [- 2.12. Расчет статистической значимости различий в конверсии между группами по «очищенным» данным. Выводы](#2.12-bullet)  \n",
    "  [- 2.13. Расчет статистической значимости различий в среднем чеке заказа между группами по «очищенным» данным. Выводы](#2.13-bullet)  \n",
    "  [- 2.14. Выводы по результатам теста](#2.14-bullet)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='1-bullet'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1. Приоритизация гипотез"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Откроем и прочитаем фаил с гипотезами"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd \n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy import stats as st\n",
    "import seaborn as sns\n",
    "import scipy.stats as stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hypothesis</th>\n",
       "      <th>Reach</th>\n",
       "      <th>Impact</th>\n",
       "      <th>Confidence</th>\n",
       "      <th>Efforts</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Добавить два новых канала привлечения трафика, что позволит привлекать на 30% больше пользователей</td>\n",
       "      <td>3</td>\n",
       "      <td>10</td>\n",
       "      <td>8</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Запустить собственную службу доставки, что сократит срок доставки заказов</td>\n",
       "      <td>2</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Добавить блоки рекомендаций товаров на сайт интернет магазина, чтобы повысить конверсию и средний чек заказа</td>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Изменить структура категорий, что увеличит конверсию, т.к. пользователи быстрее найдут нужный товар</td>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Изменить цвет фона главной страницы, чтобы увеличить вовлеченность пользователей</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                                                     Hypothesis  \\\n",
       "0  Добавить два новых канала привлечения трафика, что позволит привлекать на 30% больше пользователей             \n",
       "1  Запустить собственную службу доставки, что сократит срок доставки заказов                                      \n",
       "2  Добавить блоки рекомендаций товаров на сайт интернет магазина, чтобы повысить конверсию и средний чек заказа   \n",
       "3  Изменить структура категорий, что увеличит конверсию, т.к. пользователи быстрее найдут нужный товар            \n",
       "4  Изменить цвет фона главной страницы, чтобы увеличить вовлеченность пользователей                               \n",
       "\n",
       "   Reach  Impact  Confidence  Efforts  \n",
       "0  3      10      8           6        \n",
       "1  2      5       4           10       \n",
       "2  8      3       7           3        \n",
       "3  8      3       3           8        \n",
       "4  3      1       1           1        "
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hipothesis = pd.read_csv('/datasets/hypothesis.csv')\n",
    "pd.set_option('display.max_colwidth', -1)\n",
    "hipothesis.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 9 entries, 0 to 8\n",
      "Data columns (total 5 columns):\n",
      "Hypothesis    9 non-null object\n",
      "Reach         9 non-null int64\n",
      "Impact        9 non-null int64\n",
      "Confidence    9 non-null int64\n",
      "Efforts       9 non-null int64\n",
      "dtypes: int64(4), object(1)\n",
      "memory usage: 488.0+ bytes\n"
     ]
    }
   ],
   "source": [
    "hipothesis.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Итак, имеем фаил с 9ю гипотезами.  \n",
    " Расчитаем фреймворки ICE  и RICE по показателям, для определения приоритетов гипотез"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='1.1-bullet'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1.1. Применение фреймворка ICE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hypothesis</th>\n",
       "      <th>ICE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>Запустить акцию, дающую скидку на товар в день рождения</td>\n",
       "      <td>16.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Добавить два новых канала привлечения трафика, что позволит привлекать на 30% больше пользователей</td>\n",
       "      <td>13.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>Добавить форму подписки на все основные страницы, чтобы собрать базу клиентов для email-рассылок</td>\n",
       "      <td>11.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>Показать на главной странице баннеры с актуальными акциями и распродажами, чтобы увеличить конверсию</td>\n",
       "      <td>8.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Добавить блоки рекомендаций товаров на сайт интернет магазина, чтобы повысить конверсию и средний чек заказа</td>\n",
       "      <td>7.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Запустить собственную службу доставки, что сократит срок доставки заказов</td>\n",
       "      <td>2.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>Добавить страницу отзывов клиентов о магазине, что позволит увеличить количество заказов</td>\n",
       "      <td>1.33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Изменить структура категорий, что увеличит конверсию, т.к. пользователи быстрее найдут нужный товар</td>\n",
       "      <td>1.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Изменить цвет фона главной страницы, чтобы увеличить вовлеченность пользователей</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                                                     Hypothesis  \\\n",
       "8  Запустить акцию, дающую скидку на товар в день рождения                                                        \n",
       "0  Добавить два новых канала привлечения трафика, что позволит привлекать на 30% больше пользователей             \n",
       "7  Добавить форму подписки на все основные страницы, чтобы собрать базу клиентов для email-рассылок               \n",
       "6  Показать на главной странице баннеры с актуальными акциями и распродажами, чтобы увеличить конверсию           \n",
       "2  Добавить блоки рекомендаций товаров на сайт интернет магазина, чтобы повысить конверсию и средний чек заказа   \n",
       "1  Запустить собственную службу доставки, что сократит срок доставки заказов                                      \n",
       "5  Добавить страницу отзывов клиентов о магазине, что позволит увеличить количество заказов                       \n",
       "3  Изменить структура категорий, что увеличит конверсию, т.к. пользователи быстрее найдут нужный товар            \n",
       "4  Изменить цвет фона главной страницы, чтобы увеличить вовлеченность пользователей                               \n",
       "\n",
       "     ICE  \n",
       "8  16.20  \n",
       "0  13.33  \n",
       "7  11.20  \n",
       "6  8.00   \n",
       "2  7.00   \n",
       "1  2.00   \n",
       "5  1.33   \n",
       "3  1.12   \n",
       "4  1.00   "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hipothesis['ICE'] = hipothesis['Impact']*hipothesis['Confidence']/hipothesis['Efforts']\n",
    "pd.set_option('display.max_colwidth', -1)\n",
    "hipothesis.sort_values(by='ICE', ascending=False)[['Hypothesis', 'ICE']].round(2)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Видим, что больший приоритет за гипотезами 8,0,7 "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='1.2-bullet'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 1.2. Применение фреймворка RICE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Hypothesis</th>\n",
       "      <th>RICE</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>Добавить форму подписки на все основные страницы, чтобы собрать базу клиентов для email-рассылок</td>\n",
       "      <td>112.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>Добавить блоки рекомендаций товаров на сайт интернет магазина, чтобы повысить конверсию и средний чек заказа</td>\n",
       "      <td>56.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Добавить два новых канала привлечения трафика, что позволит привлекать на 30% больше пользователей</td>\n",
       "      <td>40.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>Показать на главной странице баннеры с актуальными акциями и распродажами, чтобы увеличить конверсию</td>\n",
       "      <td>40.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>Запустить акцию, дающую скидку на товар в день рождения</td>\n",
       "      <td>16.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Изменить структура категорий, что увеличит конверсию, т.к. пользователи быстрее найдут нужный товар</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Запустить собственную службу доставки, что сократит срок доставки заказов</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>Добавить страницу отзывов клиентов о магазине, что позволит увеличить количество заказов</td>\n",
       "      <td>4.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Изменить цвет фона главной страницы, чтобы увеличить вовлеченность пользователей</td>\n",
       "      <td>3.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                                                                     Hypothesis  \\\n",
       "7  Добавить форму подписки на все основные страницы, чтобы собрать базу клиентов для email-рассылок               \n",
       "2  Добавить блоки рекомендаций товаров на сайт интернет магазина, чтобы повысить конверсию и средний чек заказа   \n",
       "0  Добавить два новых канала привлечения трафика, что позволит привлекать на 30% больше пользователей             \n",
       "6  Показать на главной странице баннеры с актуальными акциями и распродажами, чтобы увеличить конверсию           \n",
       "8  Запустить акцию, дающую скидку на товар в день рождения                                                        \n",
       "3  Изменить структура категорий, что увеличит конверсию, т.к. пользователи быстрее найдут нужный товар            \n",
       "1  Запустить собственную службу доставки, что сократит срок доставки заказов                                      \n",
       "5  Добавить страницу отзывов клиентов о магазине, что позволит увеличить количество заказов                       \n",
       "4  Изменить цвет фона главной страницы, чтобы увеличить вовлеченность пользователей                               \n",
       "\n",
       "    RICE  \n",
       "7  112.0  \n",
       "2  56.0   \n",
       "0  40.0   \n",
       "6  40.0   \n",
       "8  16.2   \n",
       "3  9.0    \n",
       "1  4.0    \n",
       "5  4.0    \n",
       "4  3.0    "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "hipothesis['RICE'] = (hipothesis['Reach']*hipothesis['Impact']*hipothesis['Confidence'])/hipothesis['Efforts']\n",
    "hipothesis.sort_values(by='RICE', ascending=False)[['Hypothesis', 'RICE']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "С учетом охвата, получаем в топе приоритет у гипотезы 7, далее 2 и 0.  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='1.3-bullet'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### 1.3. Выводы"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. При расчете приоритизации ICE мы вичислили приоритет №1 у гипотезы 8.  \n",
    " Дать скидку действительно может быть приоритетной гипотезой, так как  \n",
    "  отношение показателя по формуле обратно пропорционально efforts, то есть усилиям вложенным в реализацию,  \n",
    "   а так как для предоставления скидки никаких особых усилий не нужно - получаем высокий приоритет.\n",
    "2. При использовании фреймворка RICE , где учитывается охват в топ поднимается 7 гипотеза.  \n",
    " Добавить форму подписки на все основные страницы - да, именно то, что повысит охваты и,  \n",
    " собрав данные с покупателей/посетителей, это позволит с ними взаимодействовать по средствам контекстной рекламы.\n",
    "3. ТОП-5 гипотез для разных фреймворков схожи"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='2-bullet'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2. Анализ A/B-теста"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Откроем результаты тестирования, проверим на пустые значения и дубликаты"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>transactionId</th>\n",
       "      <th>visitorId</th>\n",
       "      <th>date</th>\n",
       "      <th>revenue</th>\n",
       "      <th>group</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>3667963787</td>\n",
       "      <td>3312258926</td>\n",
       "      <td>2019-08-15</td>\n",
       "      <td>1650</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2804400009</td>\n",
       "      <td>3642806036</td>\n",
       "      <td>2019-08-15</td>\n",
       "      <td>730</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2961555356</td>\n",
       "      <td>4069496402</td>\n",
       "      <td>2019-08-15</td>\n",
       "      <td>400</td>\n",
       "      <td>A</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>3797467345</td>\n",
       "      <td>1196621759</td>\n",
       "      <td>2019-08-15</td>\n",
       "      <td>9759</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>2282983706</td>\n",
       "      <td>2322279887</td>\n",
       "      <td>2019-08-15</td>\n",
       "      <td>2308</td>\n",
       "      <td>B</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   transactionId   visitorId        date  revenue group\n",
       "0  3667963787     3312258926  2019-08-15  1650     B   \n",
       "1  2804400009     3642806036  2019-08-15  730      B   \n",
       "2  2961555356     4069496402  2019-08-15  400      A   \n",
       "3  3797467345     1196621759  2019-08-15  9759     B   \n",
       "4  2282983706     2322279887  2019-08-15  2308     B   "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "orders = pd.read_csv('/datasets/orders.csv')\n",
    "orders.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1197 entries, 0 to 1196\n",
      "Data columns (total 5 columns):\n",
      "transactionId    1197 non-null int64\n",
      "visitorId        1197 non-null int64\n",
      "date             1197 non-null object\n",
      "revenue          1197 non-null int64\n",
      "group            1197 non-null object\n",
      "dtypes: int64(3), object(2)\n",
      "memory usage: 46.9+ KB\n"
     ]
    }
   ],
   "source": [
    "orders.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Заменим тип данных у даты "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 1197 entries, 0 to 1196\n",
      "Data columns (total 5 columns):\n",
      "transactionId    1197 non-null int64\n",
      "visitorId        1197 non-null int64\n",
      "date             1197 non-null datetime64[ns]\n",
      "revenue          1197 non-null int64\n",
      "group            1197 non-null object\n",
      "dtypes: datetime64[ns](1), int64(3), object(1)\n",
      "memory usage: 46.9+ KB\n"
     ]
    }
   ],
   "source": [
    "orders['date'] = pd.to_datetime(orders['date'])\n",
    "orders.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "orders.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "transactionId    0\n",
       "visitorId        0\n",
       "date             0\n",
       "revenue          0\n",
       "group            0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "orders.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Данные по заказам аккуратные - дубликатов и пропусков нет."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>group</th>\n",
       "      <th>visitors</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>2019-08-01</td>\n",
       "      <td>A</td>\n",
       "      <td>719</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2019-08-02</td>\n",
       "      <td>A</td>\n",
       "      <td>619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2019-08-03</td>\n",
       "      <td>A</td>\n",
       "      <td>507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>2019-08-04</td>\n",
       "      <td>A</td>\n",
       "      <td>717</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>2019-08-05</td>\n",
       "      <td>A</td>\n",
       "      <td>756</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         date group  visitors\n",
       "0  2019-08-01  A     719     \n",
       "1  2019-08-02  A     619     \n",
       "2  2019-08-03  A     507     \n",
       "3  2019-08-04  A     717     \n",
       "4  2019-08-05  A     756     "
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "visitors = pd.read_csv('/datasets/visitors.csv')\n",
    "visitors.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 62 entries, 0 to 61\n",
      "Data columns (total 3 columns):\n",
      "date        62 non-null object\n",
      "group       62 non-null object\n",
      "visitors    62 non-null int64\n",
      "dtypes: int64(1), object(2)\n",
      "memory usage: 1.6+ KB\n"
     ]
    }
   ],
   "source": [
    "visitors.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Заменим тип данных у даты "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 62 entries, 0 to 61\n",
      "Data columns (total 3 columns):\n",
      "date        62 non-null datetime64[ns]\n",
      "group       62 non-null object\n",
      "visitors    62 non-null int64\n",
      "dtypes: datetime64[ns](1), int64(1), object(1)\n",
      "memory usage: 1.6+ KB\n"
     ]
    }
   ],
   "source": [
    "visitors['date'] = pd.to_datetime(visitors['date'])\n",
    "visitors.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "visitors.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "date        0\n",
       "group       0\n",
       "visitors    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "visitors.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Данные по поситителям аккуратные - дубликатов и пропусков нет."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='2.1-bullet'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.1. График кумулятивной выручки по группам. Выводы"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Создим датафрейм datesGroups с уникальными парами значений 'date' и 'group', таблицы orders.  \n",
    " Сбросим дубликаты "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "datesGroups = orders[['date','group']].drop_duplicates()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Объявим переменные с данными по столбцам,объединим датафреймы, переименуем столбцы "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "ordersAggregated =  datesGroups.apply(\\\n",
    "                                      lambda x: orders[np.logical_and(orders['date'] <= x['date'], orders['group'] == x['group'])]\\\n",
    "                                      .agg({'date' : 'max', 'group' : 'max', 'transactionId' : pd.Series.nunique, 'visitorId' : pd.Series.nunique, 'revenue' : 'sum'}), axis=1)\\\n",
    "                                      .sort_values(by=['date','group']) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "visitorsAggregated = datesGroups.apply(\\\n",
    "                                       lambda x: visitors[np.logical_and(visitors['date'] <= x['date'],\\\n",
    "                                       visitors['group'] == x['group'])]\\\n",
    "                                       .agg({'date' : 'max', 'group' : 'max', 'visitors' : 'sum'}), axis=1)\\\n",
    "                                       .sort_values(by=['date','group']) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "cumulativeData = ordersAggregated.merge(visitorsAggregated, left_on=['date', 'group'], right_on=['date', 'group'])\n",
    "cumulativeData.columns = ['date', 'group', 'orders', 'buyers', 'revenue', 'visitors']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Объявим переменные, в которых сохраним данные о датах, выручке и числе заказов в группах A и B."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "cumulativeRevenueA = cumulativeData[cumulativeData['group']=='A'][['date','revenue', 'orders']]\n",
    "cumulativeRevenueB = cumulativeData[cumulativeData['group']=='B'][['date','revenue', 'orders']]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Построим графики кумулятивной выручки по дням по группам."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/pandas/plotting/_matplotlib/converter.py:103: FutureWarning: Using an implicitly registered datetime converter for a matplotlib plotting method. The converter was registered by pandas on import. Future versions of pandas will require you to explicitly register matplotlib converters.\n",
      "\n",
      "To register the converters:\n",
      "\t>>> from pandas.plotting import register_matplotlib_converters\n",
      "\t>>> register_matplotlib_converters()\n",
      "  warnings.warn(msg, FutureWarning)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(cumulativeRevenueA['date'], cumulativeRevenueA['revenue'], label='A')\n",
    "plt.plot(cumulativeRevenueB['date'], cumulativeRevenueB['revenue'], label='B')\n",
    "plt.title('Кумулятивная выручка по дням по группам')\n",
    "plt.ylabel('Выручка')\n",
    "plt.xlabel('Дата')\n",
    "plt.xticks(rotation=90)\n",
    "plt.legend()\n",
    "\n",
    "from pandas.plotting import register_matplotlib_converters\n",
    "register_matplotlib_converters();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "По графику видим, что:\n",
    "1. На старте теста рещультаты были примерно равными\n",
    "2. Далее начинается стремительный рост группы В\n",
    "3. В точку на дату 13 августа данные вновь сравнялись \n",
    "4. График группы В демонстрирует более активный и сремительный рост рост.  \n",
    " Конец августа активная пора для покупок и  неудивительно, что стимулирование продаж \n",
    "  дало свои плоды в виде активного роста выручки."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='2.2-bullet'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.2. График кумулятивного среднего чека по группам. Выводы"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Для каждой группы построим графики кумулятивного среднего чека по дням."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(cumulativeRevenueA['date'], cumulativeRevenueA['revenue']/cumulativeRevenueA['orders'], label='A')\n",
    "plt.plot(cumulativeRevenueB['date'], cumulativeRevenueB['revenue']/cumulativeRevenueB['orders'], label='B')\n",
    "plt.title('Кумулятивный средний чек')\n",
    "plt.ylabel('Средний чек')\n",
    "plt.xlabel('Дата')\n",
    "plt.xticks(rotation=90)\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "График ярко демонстрирует:\n",
    "1. Средний чек очень не стабилен в начале -  \n",
    " на старте снижается у группы А , у группы В возрастает - затем колеблется.\n",
    "2. Период середины месяца где бы наблюдаем примерно равыне выручки видим, что группа А показывает более высокие результаты \n",
    "3. Далее покупатели группы А имеют примерно равные средние чеки без резких колебаний\n",
    "4. Группа В, активно стимулируемая на покупки во второй половине месяца демонстрирует резкий скачок в показателе среднего чека.\n",
    "5. Возможно в группу В попали дорогие заказы - так как всплекс уж очень вертикальный"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='2.3-bullet'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.3. График относительного изменения кумулятивного среднего чека группы B к группе A. Выводы"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Объединим таблицы cumulativeRevenueA и cumulativeRevenueB  \n",
    " так, чтобы она содержала столбцы: ['date', 'revenueA', 'revenueB', 'ordersA', 'ordersB']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>revenueA</th>\n",
       "      <th>ordersA</th>\n",
       "      <th>revenueB</th>\n",
       "      <th>ordersB</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>2019-08-01</td>\n",
       "      <td>148579</td>\n",
       "      <td>24</td>\n",
       "      <td>101217</td>\n",
       "      <td>21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2019-08-02</td>\n",
       "      <td>242401</td>\n",
       "      <td>44</td>\n",
       "      <td>266748</td>\n",
       "      <td>45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2019-08-03</td>\n",
       "      <td>354874</td>\n",
       "      <td>68</td>\n",
       "      <td>380996</td>\n",
       "      <td>61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>2019-08-04</td>\n",
       "      <td>425699</td>\n",
       "      <td>84</td>\n",
       "      <td>489567</td>\n",
       "      <td>78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>2019-08-05</td>\n",
       "      <td>549917</td>\n",
       "      <td>109</td>\n",
       "      <td>581995</td>\n",
       "      <td>101</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        date  revenueA  ordersA  revenueB  ordersB\n",
       "0 2019-08-01  148579    24       101217    21     \n",
       "1 2019-08-02  242401    44       266748    45     \n",
       "2 2019-08-03  354874    68       380996    61     \n",
       "3 2019-08-04  425699    84       489567    78     \n",
       "4 2019-08-05  549917    109      581995    101    "
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mergedCumulativeRevenue = cumulativeRevenueA.merge(cumulativeRevenueB, left_on='date', right_on='date', how='left', suffixes=['A', 'B'])\n",
    "mergedCumulativeRevenue.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Построим график относительно различия кумулятивного среднего чека группы B к группе A."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(mergedCumulativeRevenue['date'], (mergedCumulativeRevenue['revenueB']/mergedCumulativeRevenue['ordersB'])/(mergedCumulativeRevenue['revenueA']/mergedCumulativeRevenue['ordersA'])-1)\n",
    "plt.xticks(rotation=90)\n",
    "plt.axhline(y=0, color='black', linestyle='--') \n",
    "plt.title('Колебания различий среднего чека группы В к группе А')\n",
    "plt.ylabel('Колебания')\n",
    "plt.xlabel('Дата');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "На графике видим, что:\n",
    "1. Средний чек значительно различался в разные даты \n",
    "2. Предположу, что имеют место быть аномально крупные, нетипичные заказы "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='2.4-bullet'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.4. График кумулятивной конверсии по группам. Выводы"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Добавим столбец c отношением числа заказов к количеству пользователей  \n",
    "в указанной группе в указанный день.\n",
    "Объявим переменные, в которых сохраним данные о заказах в сегментах A и B."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "cumulativeData['conversion'] = cumulativeData['orders']/cumulativeData['visitors']\n",
    "cumulativeDataA = cumulativeData[cumulativeData['group']=='A']\n",
    "cumulativeDataB = cumulativeData[cumulativeData['group']=='B']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Строим графики кумулятивной конверсии по дням по группам."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(cumulativeDataA['date'], cumulativeDataA['conversion'], label='A')\n",
    "plt.plot(cumulativeDataB['date'], cumulativeDataB['conversion'], label='B')\n",
    "plt.title('Кумулятивная конверсия по дням по группам')\n",
    "plt.ylabel('Конверсия')\n",
    "plt.xlabel('Дата')\n",
    "plt.xticks(rotation=90)\n",
    "plt.legend();"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "График нам демонстрирует, что:\n",
    "1. Посетители группы B в разы охотнее приоретают товары на нашем сервисе.\n",
    "2. Посетители группы В показывают конверсию колеблющуюся, и всеже нисходящую\n",
    "3. Группа И так же не отличается ростов - так же нисходящая тенденция, и все же показатель выше  \n",
    " На данном итапе можно предположить, что тестовый пакет акционных предложений показывает хорошие результаты (результаты группы В)\n",
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='2.5-bullet'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.5. График относительного изменения кумулятивной конверсии группы B к группе A. Выводы"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Объединим таблицы с прошлого этапа, возьмем только нужные столбцы"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>conversionA</th>\n",
       "      <th>conversionB</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>2019-08-01</td>\n",
       "      <td>0.033380</td>\n",
       "      <td>0.029453</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2019-08-02</td>\n",
       "      <td>0.032885</td>\n",
       "      <td>0.034776</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2019-08-03</td>\n",
       "      <td>0.036856</td>\n",
       "      <td>0.033833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>2019-08-04</td>\n",
       "      <td>0.032787</td>\n",
       "      <td>0.030315</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>2019-08-05</td>\n",
       "      <td>0.032851</td>\n",
       "      <td>0.030793</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        date  conversionA  conversionB\n",
       "0 2019-08-01  0.033380     0.029453   \n",
       "1 2019-08-02  0.032885     0.034776   \n",
       "2 2019-08-03  0.036856     0.033833   \n",
       "3 2019-08-04  0.032787     0.030315   \n",
       "4 2019-08-05  0.032851     0.030793   "
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "mergedCumulativeConversions = cumulativeDataA[['date','conversion']].merge(cumulativeDataB[['date','conversion']], left_on='date', right_on='date', how='left', suffixes=['A', 'B'])\n",
    "mergedCumulativeConversions.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Построим график относительно различия кумулятивной конверсии группы B к группе A."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(mergedCumulativeConversions['date'], mergedCumulativeConversions['conversionB']/mergedCumulativeConversions['conversionA']-1, label=\"Относительный прирост конверсии группы B относительно группы A\")\n",
    "plt.xticks(rotation=90)\n",
    "#plt.legend()\n",
    "plt.title('Колебания кумулятивной конверсии группы В к группе А')\n",
    "plt.ylabel('Колебания')\n",
    "plt.xlabel('Дата')\n",
    "plt.axhline(y = 0, color='black', linestyle='--')\n",
    "plt.axhline(y = 0.2, color='grey', linestyle='--');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "На графике видим, что:\n",
    "1. Показатель конверсии группы В везко вырос в начале периода, затем спад и снова активный рост\n",
    "2. Показатель конверсии колеблется в районе 10%"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='2.5-bullet'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.6. Точечный график количества заказов по пользователям. Выводы"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Найдем число заказов по пользователям — создайте новый датафрейм"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>userId</th>\n",
       "      <th>orders</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>1023</td>\n",
       "      <td>4256040402</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>591</td>\n",
       "      <td>2458001652</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>569</td>\n",
       "      <td>2378935119</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>487</td>\n",
       "      <td>2038680547</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>44</td>\n",
       "      <td>199603092</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>744</td>\n",
       "      <td>3062433592</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>55</td>\n",
       "      <td>237748145</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>917</td>\n",
       "      <td>3803269165</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>299</td>\n",
       "      <td>1230306981</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>897</td>\n",
       "      <td>3717692402</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          userId  orders\n",
       "1023  4256040402  11    \n",
       "591   2458001652  11    \n",
       "569   2378935119  9     \n",
       "487   2038680547  8     \n",
       "44    199603092   5     \n",
       "744   3062433592  5     \n",
       "55    237748145   5     \n",
       "917   3803269165  5     \n",
       "299   1230306981  5     \n",
       "897   3717692402  5     "
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ordersByUsers = orders.drop(['group', 'revenue', 'date'], axis=1).groupby('visitorId', as_index=False).agg({'transactionId' : pd.Series.nunique})\n",
    "ordersByUsers.columns = ['userId','orders']\n",
    "ordersByUsers.sort_values(by='orders',ascending=False).head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Построим гистограмму распределения числа заказов по пользователям"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(ordersByUsers['orders']) \n",
    "plt.title('Распределение числа заказов')\n",
    "plt.ylabel('Количество покупателей')\n",
    "plt.xlabel('Количество заказов');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Видим, что в  основном наши покупатели совершают до 2х заказов, реже 3х.  \n",
    " Построим точечную диаграмму."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x_values = pd.Series(range(0,len(ordersByUsers)))\n",
    "plt.scatter(x_values, ordersByUsers['orders']) \n",
    "plt.title('Распределение числа заказов')\n",
    "plt.ylabel('Количество заказов')\n",
    "plt.xlabel('Количество покупателей');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Видим на графике:\n",
    "1. Абсолютное большинмтво заказов - до 2х включительно\n",
    "2. Есть единичные данные по 5 и более заказам  \n",
    " Для более точной картины перейдем к следующему шагу"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='2.7-bullet'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.7. Расчет 95го и 99го перцентили количества заказов на пользователя"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Посчитаем 95-й и 99-й выборочные перцентили количества заказов по пользователям"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2., 4.])"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.percentile(ordersByUsers['orders'], [95, 99])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "По расчету перцентилей видим:\n",
    "1. Не более 5% наших покупателей совершают более 2х заказов\n",
    "2. Не более 1% выполняют более 4х заказов"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='2.8-bullet'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.8. Точечный график стоимостей заказов. Выводы"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Построим гистограмму распределения стоимостей заказов - гистограмму по выручке"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(orders['revenue']) \n",
    "plt.title('Распределение объемов выручки')\n",
    "plt.ylabel('Количество покупателей')\n",
    "plt.xlabel('Объемы выручки');"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Видим, что максимум значений попали в диапазон до примерно 160000  \n",
    " Посмотри нагляднее на точечном графике.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "x_values = pd.Series(range(0,len(orders['revenue'])))\n",
    "plt.scatter(x_values, orders['revenue']) \n",
    "plt.title('Распределение объемов выручки')\n",
    "plt.ylabel('Объемы выручки')\n",
    "plt.xlabel('Количество покупателей')\n",
    "plt.ylim(5000, 100000);"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Основной объем выручки приходится на заказы до 200 тысяч."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='2.9-bullet'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.9. Расчет 95го и 99го перцентилей стоимости заказов"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Посмотрим в процентном соотношении как распределились данные.  \n",
    " Расчитаем 95й и 99й перцентили"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([28000. , 58233.2])"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.percentile(orders['revenue'], [95, 99])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Выводы по данным выручки:\n",
    "1. Большинство заказов приносят выручку в рамках  до 200 тысяч\n",
    "2. По расчетам перцентилей видим, \n",
    " - что не более 5% покупателей делаю заказ на сумму выше 28000\n",
    " - не более 1% покупатей тратят на заказ свыше 58233,2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='2.10-bullet'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.10. Расчет статистической значимости различий в конверсии между группами по «сырым» данным. Выводы"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Соберем данные из наших двух изначальных датафреймов с заказами и посетителями.  \n",
    " Найдем количество визитов в группах А и В на определенную дату "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>visitorsPerDateA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>2019-08-01</td>\n",
       "      <td>719</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2019-08-02</td>\n",
       "      <td>619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2019-08-03</td>\n",
       "      <td>507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>2019-08-04</td>\n",
       "      <td>717</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>2019-08-05</td>\n",
       "      <td>756</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        date  visitorsPerDateA\n",
       "0 2019-08-01  719             \n",
       "1 2019-08-02  619             \n",
       "2 2019-08-03  507             \n",
       "3 2019-08-04  717             \n",
       "4 2019-08-05  756             "
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "visitorsADaily = visitors[visitors['group']=='A'][['date', 'visitors']]\n",
    "visitorsADaily.columns = ['date', 'visitorsPerDateA']\n",
    "visitorsADaily.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>visitorsPerDateB</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>31</td>\n",
       "      <td>2019-08-01</td>\n",
       "      <td>713</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>32</td>\n",
       "      <td>2019-08-02</td>\n",
       "      <td>581</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>33</td>\n",
       "      <td>2019-08-03</td>\n",
       "      <td>509</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>34</td>\n",
       "      <td>2019-08-04</td>\n",
       "      <td>770</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>35</td>\n",
       "      <td>2019-08-05</td>\n",
       "      <td>707</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         date  visitorsPerDateB\n",
       "31 2019-08-01  713             \n",
       "32 2019-08-02  581             \n",
       "33 2019-08-03  509             \n",
       "34 2019-08-04  770             \n",
       "35 2019-08-05  707             "
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "visitorsBDaily = visitors[visitors['group']=='B'][['date', 'visitors']]\n",
    "visitorsBDaily.columns = ['date', 'visitorsPerDateB']\n",
    "visitorsBDaily.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Теперь посмотрим в группах количество посетителей до выбранной даты "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>visitorsCummulativeA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>2019-08-01</td>\n",
       "      <td>719</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2019-08-02</td>\n",
       "      <td>1338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2019-08-03</td>\n",
       "      <td>1845</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>2019-08-04</td>\n",
       "      <td>2562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>2019-08-05</td>\n",
       "      <td>3318</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        date  visitorsCummulativeA\n",
       "0 2019-08-01  719                 \n",
       "1 2019-08-02  1338                \n",
       "2 2019-08-03  1845                \n",
       "3 2019-08-04  2562                \n",
       "4 2019-08-05  3318                "
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "visitorsACummulative = visitorsADaily.apply(lambda x: visitorsADaily[visitorsADaily['date'] <= x['date']].agg({'date' : 'max', 'visitorsPerDateA' : 'sum'}), axis=1)\n",
    "visitorsACummulative.columns = ['date', 'visitorsCummulativeA']\n",
    "visitorsACummulative.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>visitorsCummulativeB</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>31</td>\n",
       "      <td>2019-08-01</td>\n",
       "      <td>713</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>32</td>\n",
       "      <td>2019-08-02</td>\n",
       "      <td>1294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>33</td>\n",
       "      <td>2019-08-03</td>\n",
       "      <td>1803</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>34</td>\n",
       "      <td>2019-08-04</td>\n",
       "      <td>2573</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>35</td>\n",
       "      <td>2019-08-05</td>\n",
       "      <td>3280</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         date  visitorsCummulativeB\n",
       "31 2019-08-01  713                 \n",
       "32 2019-08-02  1294                \n",
       "33 2019-08-03  1803                \n",
       "34 2019-08-04  2573                \n",
       "35 2019-08-05  3280                "
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "visitorsBCummulative = visitorsBDaily.apply(lambda x: visitorsBDaily[visitorsBDaily['date'] <= x['date']].agg({'date' : 'max', 'visitorsPerDateB' : 'sum'}), axis=1)\n",
    "visitorsBCummulative.columns = ['date', 'visitorsCummulativeB']\n",
    "visitorsBCummulative.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Посмотрим количество заказов на определенную дату в группах"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>ordersPerDateA</th>\n",
       "      <th>revenuePerDateA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>2019-08-01</td>\n",
       "      <td>24</td>\n",
       "      <td>148579</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2019-08-02</td>\n",
       "      <td>20</td>\n",
       "      <td>93822</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2019-08-03</td>\n",
       "      <td>24</td>\n",
       "      <td>112473</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>2019-08-04</td>\n",
       "      <td>16</td>\n",
       "      <td>70825</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>2019-08-05</td>\n",
       "      <td>25</td>\n",
       "      <td>124218</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        date  ordersPerDateA  revenuePerDateA\n",
       "0 2019-08-01  24              148579         \n",
       "1 2019-08-02  20              93822          \n",
       "2 2019-08-03  24              112473         \n",
       "3 2019-08-04  16              70825          \n",
       "4 2019-08-05  25              124218         "
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ordersADaily = orders[orders['group']=='A'][['date', 'transactionId', 'visitorId', 'revenue']]\\\n",
    "    .groupby('date', as_index=False)\\\n",
    "    .agg({'transactionId' : pd.Series.nunique, 'revenue' : 'sum'})\n",
    "ordersADaily.columns = ['date', 'ordersPerDateA', 'revenuePerDateA']\n",
    "ordersADaily.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>ordersPerDateB</th>\n",
       "      <th>revenuePerDateB</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>2019-08-01</td>\n",
       "      <td>21</td>\n",
       "      <td>101217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2019-08-02</td>\n",
       "      <td>24</td>\n",
       "      <td>165531</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2019-08-03</td>\n",
       "      <td>16</td>\n",
       "      <td>114248</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>2019-08-04</td>\n",
       "      <td>17</td>\n",
       "      <td>108571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>2019-08-05</td>\n",
       "      <td>23</td>\n",
       "      <td>92428</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        date  ordersPerDateB  revenuePerDateB\n",
       "0 2019-08-01  21              101217         \n",
       "1 2019-08-02  24              165531         \n",
       "2 2019-08-03  16              114248         \n",
       "3 2019-08-04  17              108571         \n",
       "4 2019-08-05  23              92428          "
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ordersBDaily = orders[orders['group']=='B'][['date', 'transactionId', 'visitorId', 'revenue']]\\\n",
    "    .groupby('date', as_index=False)\\\n",
    "    .agg({'transactionId' : pd.Series.nunique, 'revenue' : 'sum'})\n",
    "ordersBDaily.columns = ['date', 'ordersPerDateB', 'revenuePerDateB']\n",
    "ordersBDaily.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Теперь посмотрим количество заказов в группах до выбранной даты "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>ordersCummulativeA</th>\n",
       "      <th>revenueCummulativeA</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>2019-08-01</td>\n",
       "      <td>24</td>\n",
       "      <td>148579</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2019-08-02</td>\n",
       "      <td>44</td>\n",
       "      <td>242401</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2019-08-03</td>\n",
       "      <td>68</td>\n",
       "      <td>354874</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>2019-08-04</td>\n",
       "      <td>84</td>\n",
       "      <td>425699</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>2019-08-05</td>\n",
       "      <td>109</td>\n",
       "      <td>549917</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        date  ordersCummulativeA  revenueCummulativeA\n",
       "0 2019-08-01  24                  148579             \n",
       "1 2019-08-02  44                  242401             \n",
       "2 2019-08-03  68                  354874             \n",
       "3 2019-08-04  84                  425699             \n",
       "4 2019-08-05  109                 549917             "
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ordersACummulative = ordersADaily.apply(\n",
    "    lambda x: \\\n",
    "        ordersADaily[ordersADaily['date'] <= x['date']]\\\n",
    "            .agg({\n",
    "                'date' : 'max',\n",
    "                'ordersPerDateA' : 'sum',\n",
    "                'revenuePerDateA' : 'sum'}), axis=1).sort_values(by=['date'])\n",
    "ordersACummulative.columns = ['date', 'ordersCummulativeA', 'revenueCummulativeA']\n",
    "ordersACummulative.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>ordersCummulativeB</th>\n",
       "      <th>revenueCummulativeB</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>2019-08-01</td>\n",
       "      <td>21</td>\n",
       "      <td>101217</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2019-08-02</td>\n",
       "      <td>45</td>\n",
       "      <td>266748</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2019-08-03</td>\n",
       "      <td>61</td>\n",
       "      <td>380996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>2019-08-04</td>\n",
       "      <td>78</td>\n",
       "      <td>489567</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>2019-08-05</td>\n",
       "      <td>101</td>\n",
       "      <td>581995</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        date  ordersCummulativeB  revenueCummulativeB\n",
       "0 2019-08-01  21                  101217             \n",
       "1 2019-08-02  45                  266748             \n",
       "2 2019-08-03  61                  380996             \n",
       "3 2019-08-04  78                  489567             \n",
       "4 2019-08-05  101                 581995             "
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ordersBCummulative = ordersBDaily.apply(\n",
    "    lambda x: \\\n",
    "        ordersBDaily[ordersBDaily['date'] <= x['date']]\\\n",
    "            .agg({\n",
    "                'date' : 'max',\n",
    "                'ordersPerDateB' : 'sum',\n",
    "                'revenuePerDateB' : 'sum'}), axis=1).sort_values(by=['date'])\n",
    "ordersBCummulative.columns = ['date', 'ordersCummulativeB', 'revenueCummulativeB']\n",
    "ordersBCummulative.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Теперь соединим все данные "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>ordersPerDateA</th>\n",
       "      <th>revenuePerDateA</th>\n",
       "      <th>ordersPerDateB</th>\n",
       "      <th>revenuePerDateB</th>\n",
       "      <th>ordersCummulativeA</th>\n",
       "      <th>revenueCummulativeA</th>\n",
       "      <th>ordersCummulativeB</th>\n",
       "      <th>revenueCummulativeB</th>\n",
       "      <th>visitorsPerDateA</th>\n",
       "      <th>visitorsPerDateB</th>\n",
       "      <th>visitorsCummulativeA</th>\n",
       "      <th>visitorsCummulativeB</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>2019-08-01</td>\n",
       "      <td>24</td>\n",
       "      <td>148579</td>\n",
       "      <td>21</td>\n",
       "      <td>101217</td>\n",
       "      <td>24</td>\n",
       "      <td>148579</td>\n",
       "      <td>21</td>\n",
       "      <td>101217</td>\n",
       "      <td>719</td>\n",
       "      <td>713</td>\n",
       "      <td>719</td>\n",
       "      <td>713</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>2019-08-02</td>\n",
       "      <td>20</td>\n",
       "      <td>93822</td>\n",
       "      <td>24</td>\n",
       "      <td>165531</td>\n",
       "      <td>44</td>\n",
       "      <td>242401</td>\n",
       "      <td>45</td>\n",
       "      <td>266748</td>\n",
       "      <td>619</td>\n",
       "      <td>581</td>\n",
       "      <td>1338</td>\n",
       "      <td>1294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2019-08-03</td>\n",
       "      <td>24</td>\n",
       "      <td>112473</td>\n",
       "      <td>16</td>\n",
       "      <td>114248</td>\n",
       "      <td>68</td>\n",
       "      <td>354874</td>\n",
       "      <td>61</td>\n",
       "      <td>380996</td>\n",
       "      <td>507</td>\n",
       "      <td>509</td>\n",
       "      <td>1845</td>\n",
       "      <td>1803</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>2019-08-04</td>\n",
       "      <td>16</td>\n",
       "      <td>70825</td>\n",
       "      <td>17</td>\n",
       "      <td>108571</td>\n",
       "      <td>84</td>\n",
       "      <td>425699</td>\n",
       "      <td>78</td>\n",
       "      <td>489567</td>\n",
       "      <td>717</td>\n",
       "      <td>770</td>\n",
       "      <td>2562</td>\n",
       "      <td>2573</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>2019-08-05</td>\n",
       "      <td>25</td>\n",
       "      <td>124218</td>\n",
       "      <td>23</td>\n",
       "      <td>92428</td>\n",
       "      <td>109</td>\n",
       "      <td>549917</td>\n",
       "      <td>101</td>\n",
       "      <td>581995</td>\n",
       "      <td>756</td>\n",
       "      <td>707</td>\n",
       "      <td>3318</td>\n",
       "      <td>3280</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        date  ordersPerDateA  revenuePerDateA  ordersPerDateB  \\\n",
       "0 2019-08-01  24              148579           21               \n",
       "1 2019-08-02  20              93822            24               \n",
       "2 2019-08-03  24              112473           16               \n",
       "3 2019-08-04  16              70825            17               \n",
       "4 2019-08-05  25              124218           23               \n",
       "\n",
       "   revenuePerDateB  ordersCummulativeA  revenueCummulativeA  \\\n",
       "0  101217           24                  148579                \n",
       "1  165531           44                  242401                \n",
       "2  114248           68                  354874                \n",
       "3  108571           84                  425699                \n",
       "4  92428            109                 549917                \n",
       "\n",
       "   ordersCummulativeB  revenueCummulativeB  visitorsPerDateA  \\\n",
       "0  21                  101217               719                \n",
       "1  45                  266748               619                \n",
       "2  61                  380996               507                \n",
       "3  78                  489567               717                \n",
       "4  101                 581995               756                \n",
       "\n",
       "   visitorsPerDateB  visitorsCummulativeA  visitorsCummulativeB  \n",
       "0  713               719                   713                   \n",
       "1  581               1338                  1294                  \n",
       "2  509               1845                  1803                  \n",
       "3  770               2562                  2573                  \n",
       "4  707               3318                  3280                  "
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = ordersADaily.merge(ordersBDaily, left_on='date', right_on='date', how='left')\\\n",
    "    .merge(ordersACummulative, left_on='date', right_on='date', how='left')\\\n",
    "    .merge(ordersBCummulative, left_on='date', right_on='date', how='left')\\\n",
    "    .merge(visitorsADaily, left_on='date', right_on='date', how='left')\\\n",
    "    .merge(visitorsBDaily, left_on='date', right_on='date', how='left')\\\n",
    "    .merge(visitorsACummulative, left_on='date', right_on='date', how='left')\\\n",
    "    .merge(visitorsBCummulative, left_on='date', right_on='date', how='left')\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Создадим еще переменные для расчета заказов уникальных пользователей в группах "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>userId</th>\n",
       "      <th>orders</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>8300375</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>11685486</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>54447517</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>66685450</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>78758296</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>498</td>\n",
       "      <td>4243832526</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>499</td>\n",
       "      <td>4256040402</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>500</td>\n",
       "      <td>4259830713</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>501</td>\n",
       "      <td>4266935830</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>502</td>\n",
       "      <td>4278982564</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>503 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         userId  orders\n",
       "0    8300375     1     \n",
       "1    11685486    1     \n",
       "2    54447517    1     \n",
       "3    66685450    1     \n",
       "4    78758296    1     \n",
       "..        ...   ..     \n",
       "498  4243832526  1     \n",
       "499  4256040402  7     \n",
       "500  4259830713  1     \n",
       "501  4266935830  1     \n",
       "502  4278982564  1     \n",
       "\n",
       "[503 rows x 2 columns]"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ordersByUsersA = orders[orders['group']=='A'].groupby('visitorId', as_index=False).agg({'transactionId' : pd.Series.nunique})\n",
    "ordersByUsersA.columns = ['userId', 'orders']\n",
    "\n",
    "ordersByUsersB = orders[orders['group']=='B'].groupby('visitorId', as_index=False).agg({'transactionId' : pd.Series.nunique})\n",
    "ordersByUsersB.columns = ['userId', 'orders'] \n",
    "\n",
    "ordersByUsersA"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "А теперь готовим выборки к проверке критерием Манна-Уитни. Соберем еще две переменные с пользователями и соответствующим им количеством заказов "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "sampleA = pd.concat([ordersByUsersA['orders'],pd.Series(0, index=np.arange(data['visitorsPerDateA'].sum() - len(ordersByUsersA['orders'])), name='orders')],axis=0)\n",
    "sampleB = pd.concat([ordersByUsersB['orders'],pd.Series(0, index=np.arange(data['visitorsPerDateB'].sum() - len(ordersByUsersB['orders'])), name='orders')],axis=0) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Введем понимание:\n",
    "1. Нулевая гипотеза - Конверсии группы В и группы А идентичны\n",
    "2. Альтернативная гипотеза - Конверсии группы В и группы А неидентичны\n",
    "3. Коэффициент статистической значимости зададим 0,05"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-значение: 0.016792355056752608\n",
      "Отвергаем нулевую гипотезу\n"
     ]
    }
   ],
   "source": [
    "alpha = 0.05\n",
    "\n",
    "results = stats.mannwhitneyu(\n",
    "    sampleA, \n",
    "    sampleB, \n",
    "    alternative = 'two-sided')\n",
    "print('p-значение:', results.pvalue)\n",
    "\n",
    "if (results.pvalue < alpha):\n",
    "    print(\"Отвергаем нулевую гипотезу\")\n",
    "else:\n",
    "    print(\"Не получилось отвергнуть нулевую гипотезу\") "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.138\n"
     ]
    }
   ],
   "source": [
    "print(\"{0:.3f}\".format((data['ordersPerDateB'].sum()/data['visitorsPerDateB'].sum())\\\n",
    "                       /(data['ordersPerDateA'].sum()/data['visitorsPerDateA'].sum())-1)) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Выводы по расчетам статистической значимости конверсий:\n",
    "1. Проверка критерием Манна-Уитни показала, что конверсии не идентичны\n",
    "2. Относительный прирост конверсии в группе В составляет 13% к конверсии группы А "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='2.11-bullet'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.11. Расчет статистической значимости различий в среднем чеке заказа между группами по «сырым» данным. Выводы"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Опираясь на данные полученные выше, расчитаем статистическую значимость в среднем чеке между группами "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Введем понимание:\n",
    "1. Нулевая гипотеза - Средний чек группы В и группы А идентичны\n",
    "2. Альтернативная гипотеза - Средний чек группы В и группы А неидентичны\n",
    "3. Коэффициент статистической значимости зададим 0,05"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-значение: 0.7292909855432458\n",
      "Не получилось отвергнуть нулевую гипотезу\n"
     ]
    }
   ],
   "source": [
    "alpha = 0.05\n",
    "\n",
    "results = stats.mannwhitneyu(\n",
    "    orders[orders['group']=='A']['revenue'], \n",
    "    orders[orders['group']=='B']['revenue'], \n",
    "    alternative = 'two-sided')\n",
    "print('p-значение:', results.pvalue)\n",
    "\n",
    "if (results.pvalue < alpha):\n",
    "    print(\"Отвергаем нулевую гипотезу\")\n",
    "else:\n",
    "    print(\"Не получилось отвергнуть нулевую гипотезу\") "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.259\n"
     ]
    }
   ],
   "source": [
    "print(\"{0:.3f}\".format(orders[orders['group']=='B']['revenue'].mean()/orders[orders['group']=='A']['revenue'].mean()-1)) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Выводы:\n",
    "1. Значения среднего чека идентичны - нет статистически значимых различий\n",
    "2. При том, что различий нет разница между средними чеками в группах составляет 25% "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='2.12-bullet'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.12. Расчет статистической значимости различий в конверсии между группами по «очищенным» данным. Выводы"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Начнем искать аномалии и очищать данные.  \n",
    " Вспомним, что нормальным считаеся количество заказов = 2, соответственно будем смотреть, что  \n",
    "  аномалии - это от 3 и больше заказов и стоимость заказа от 28 000"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "usersWithManyOrders = pd.concat([ordersByUsersA[ordersByUsersA['orders'] < 4]['userId'],\\\n",
    "                                 ordersByUsersB[ordersByUsersB['orders'] < 4]['userId']], axis = 0)\n",
    "usersWithExpensiveOrders = orders[orders['revenue'] > 28000]['visitorId']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    5114589 \n",
       "1    6958315 \n",
       "0    8300375 \n",
       "1    11685486\n",
       "3    39475350\n",
       "dtype: int64"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "abnormalUsers = pd.concat([usersWithManyOrders, usersWithExpensiveOrders], axis = 0)\\\n",
    "                          .drop_duplicates().sort_values()\n",
    "abnormalUsers.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Расчистив данные, мы избавились от:\n",
    " - 1% пользователей совершивших более 4 заказов \n",
    " - 1-5% заказов дороде 28000  "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Посчитаем статистическую значимость различия конверсии после удаления аномальных пользователей.  \n",
    " Для этого создадим еще две переменные с очищенными данными"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "sampleAFiltered = pd.concat([ordersByUsersA[np.logical_not(ordersByUsersA['userId'].isin(abnormalUsers))]['orders'],pd.Series(0, index=np.arange(data['visitorsPerDateA'].sum() - len(ordersByUsersA['orders'])),name='orders')],axis=0)\n",
    "sampleBFiltered = pd.concat([ordersByUsersB[np.logical_not(ordersByUsersB['userId'].isin(abnormalUsers))]['orders'],pd.Series(0, index=np.arange(data['visitorsPerDateB'].sum() - len(ordersByUsersB['orders'])),name='orders')],axis=0) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Введем понимание:\n",
    "1. Нулевая гипотеза - Конверсии группы В и группы А идентичны\n",
    "2. Альтернативная гипотеза - Конверсии группы В и группы А неидентичны\n",
    "3. Коэффициент статистической значимости зададим 0,05"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-значение: 0.9970682996657882\n",
      "Не получилось отвергнуть нулевую гипотезу\n"
     ]
    }
   ],
   "source": [
    "alpha = 0.05\n",
    "\n",
    "results = stats.mannwhitneyu(\n",
    "    sampleAFiltered, \n",
    "    sampleBFiltered, \n",
    "    alternative = 'two-sided')\n",
    "print('p-значение:', results.pvalue)\n",
    "\n",
    "if (results.pvalue < alpha):\n",
    "    print(\"Отвергаем нулевую гипотезу\")\n",
    "else:\n",
    "    print(\"Не получилось отвергнуть нулевую гипотезу\") "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.19365\n"
     ]
    }
   ],
   "source": [
    "print(\"{0:.5f}\".format(sampleBFiltered.mean()/sampleAFiltered.mean()-1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Выводы:\n",
    "1. Статистическая значимость недостигнута - значения неидентичны\n",
    "2. Конверси по очищенным данным в группе В превосходит группу А на 14,5%"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='2.13-bullet'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.13. Расчет статистической значимости различий в среднем чеке заказа между группами по «очищенным» данным. Выводы"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Данные очищены. По сырым данным статистических различий не было - проверим, изменилось ли что."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Введем понимание:\n",
    "1. Нулевая гипотеза - Средний чек группы В и группы А идентичны\n",
    "2. Альтернативная гипотеза - Средний чек группы В и группы А неидентичны\n",
    "3. Коэффициент статистической значимости зададим 0,05"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-значение: 0.9270990616387901\n",
      "Не получилось отвергнуть нулевую гипотезу\n"
     ]
    }
   ],
   "source": [
    "alpha = 0.05\n",
    "\n",
    "results = stats.mannwhitneyu(\n",
    "    orders[np.logical_and(orders['group']=='A',np.logical_not(orders['visitorId'].isin(abnormalUsers)))]['revenue'],\n",
    "    orders[np.logical_and(orders['group']=='B',np.logical_not(orders['visitorId'].isin(abnormalUsers)))]['revenue'], \n",
    "    alternative = 'two-sided')\n",
    "print('p-значение:', results.pvalue)\n",
    "\n",
    "if (results.pvalue < alpha):\n",
    "    print(\"Отвергаем нулевую гипотезу\")\n",
    "else:\n",
    "    print(\"Не получилось отвергнуть нулевую гипотезу\") "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.256\n"
     ]
    }
   ],
   "source": [
    "print(\"{0:.3f}\".format(\n",
    "    orders[np.logical_and(orders['group']=='B',np.logical_not(orders['visitorId'].isin(abnormalUsers)))]['revenue'].mean()/\n",
    "    orders[np.logical_and(\n",
    "        orders['group']=='A',\n",
    "        np.logical_not(orders['visitorId'].isin(abnormalUsers)))]['revenue'].mean() - 1)) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Выводы:\n",
    "1. По-прежнему нет статистически значимого различия в среднем чеке\n",
    "2. Прирост среднего чека в группе В отрицательный. Возможно, предложив пакет скидок нашим покупателям, в итоге работаем себе в убыток."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='2.14-bullet'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 2.14. Выводы по результатам теста"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Мы провели анализ А\\В теста. По результатам можем сделать следующие выводы:\n",
    "- Группа B показывала лучший результат и по конверсии, и по выручке\n",
    "- После очистки данных мы убедились, что какой бы не была хорошей конверсия,  \n",
    " у нас она 14,5%, что весьма не плохо -  \n",
    "  на выходе мы имеем орицательное сравнительное значение среднего чека.  \n",
    "   Что говорит о том, что покупают много и хорошо, но вот прибыли это не приносит\n",
    "- Все же пресловутая стабильность группы А показала на выходе положтельный результат.  \n",
    "- Дважды тест Манна-Уитни нам показал, что в группах по разным показателям нет статистически значимых различий \n",
    "\n",
    "Решение однозначно - тест нужно остановить, чтобы не разорить компанию.\n",
    "\n",
    "Для решение основной задачи - увеличения прибыли, стоит обратить внимание н разработать другие гипотезы:\n",
    "- продуматать и доработать программы лояльности\n",
    "- системы стимулирования повторных покупок\n",
    "- перенастройку таргетинга и ретаргетинга.\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.8"
  },
  "toc": {
   "base_numbering": "",
   "nav_menu": {
    "height": "285px",
    "width": "491.992px"
   },
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
