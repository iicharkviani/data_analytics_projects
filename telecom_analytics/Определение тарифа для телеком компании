{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Определение перспективного тарифа для телеком компании\n",
    "\n",
    "## Описание проекта \n",
    "Целью выполнения данного проекта является  \n",
    "ответ на вопрос коммерческого департамента для корректировки рекламного бюджета:\"Какой тариф приносит больше денег?\".  \n",
    "\n",
    "### План работы  \n",
    " [1. Знакомство с данными](#1.-bullet)   \n",
    " \n",
    " [2. Подготовка данных](#2.-bullet)     \n",
    " \n",
    " [3. Исследовательский анализ данных](#3.-bullet)\n",
    " \n",
    " [4. Проверка гипотез](#4.-bullet)     \n",
    "   [- 4.1 Средняя выручка пользователей тарифов «Ультра» и «Смарт» различается](#4.1.-bullet)   \n",
    "   [- 4.2 Средняя выручка пользователей из Москвы отличается от выручки пользователей из других регионов](#4.2.-bullet)  \n",
    "   \n",
    " [5. Общие выводы](#5.-bullet) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='1.-bullet'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 1. Знакомство с данными"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>call_date</th>\n",
       "      <th>duration</th>\n",
       "      <th>user_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1000_0</td>\n",
       "      <td>2018-07-25</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1000_1</td>\n",
       "      <td>2018-08-17</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1000_2</td>\n",
       "      <td>2018-06-11</td>\n",
       "      <td>2.85</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1000_3</td>\n",
       "      <td>2018-09-21</td>\n",
       "      <td>13.80</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1000_4</td>\n",
       "      <td>2018-12-15</td>\n",
       "      <td>5.18</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>1000_5</td>\n",
       "      <td>2018-11-02</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>1000_6</td>\n",
       "      <td>2018-10-18</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>1000_7</td>\n",
       "      <td>2018-08-22</td>\n",
       "      <td>18.31</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>1000_8</td>\n",
       "      <td>2018-09-15</td>\n",
       "      <td>18.44</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>1000_9</td>\n",
       "      <td>2018-08-15</td>\n",
       "      <td>0.00</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id   call_date  duration  user_id\n",
       "0  1000_0  2018-07-25      0.00     1000\n",
       "1  1000_1  2018-08-17      0.00     1000\n",
       "2  1000_2  2018-06-11      2.85     1000\n",
       "3  1000_3  2018-09-21     13.80     1000\n",
       "4  1000_4  2018-12-15      5.18     1000\n",
       "5  1000_5  2018-11-02      0.00     1000\n",
       "6  1000_6  2018-10-18      0.00     1000\n",
       "7  1000_7  2018-08-22     18.31     1000\n",
       "8  1000_8  2018-09-15     18.44     1000\n",
       "9  1000_9  2018-08-15      0.00     1000"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "calls = pd.read_csv('/datasets/calls.csv')\n",
    "calls.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 202607 entries, 0 to 202606\n",
      "Data columns (total 4 columns):\n",
      "id           202607 non-null object\n",
      "call_date    202607 non-null object\n",
      "duration     202607 non-null float64\n",
      "user_id      202607 non-null int64\n",
      "dtypes: float64(1), int64(1), object(2)\n",
      "memory usage: 6.2+ MB\n"
     ]
    }
   ],
   "source": [
    "calls.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "calls.duplicated().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Вывод по данным calls\n",
    "1. Есть страннеы 0,00 в длительности - возможно это сброшенные звонки\n",
    "2. Звонят редко , но разговоры долгие\n",
    "3. Заменим тип данных у даты\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>id</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>session_date</th>\n",
       "      <th>user_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1000_0</td>\n",
       "      <td>112.95</td>\n",
       "      <td>2018-11-25</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1000_1</td>\n",
       "      <td>1052.81</td>\n",
       "      <td>2018-09-07</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1000_2</td>\n",
       "      <td>1197.26</td>\n",
       "      <td>2018-06-25</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1000_3</td>\n",
       "      <td>550.27</td>\n",
       "      <td>2018-08-22</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>1000_4</td>\n",
       "      <td>302.56</td>\n",
       "      <td>2018-09-24</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>1000_5</td>\n",
       "      <td>399.97</td>\n",
       "      <td>2018-10-02</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>1000_6</td>\n",
       "      <td>540.08</td>\n",
       "      <td>2018-09-07</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>1000_7</td>\n",
       "      <td>415.70</td>\n",
       "      <td>2018-07-11</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>1000_8</td>\n",
       "      <td>505.40</td>\n",
       "      <td>2018-10-08</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>1000_9</td>\n",
       "      <td>345.54</td>\n",
       "      <td>2018-09-03</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0      id  mb_used session_date  user_id\n",
       "0           0  1000_0   112.95   2018-11-25     1000\n",
       "1           1  1000_1  1052.81   2018-09-07     1000\n",
       "2           2  1000_2  1197.26   2018-06-25     1000\n",
       "3           3  1000_3   550.27   2018-08-22     1000\n",
       "4           4  1000_4   302.56   2018-09-24     1000\n",
       "5           5  1000_5   399.97   2018-10-02     1000\n",
       "6           6  1000_6   540.08   2018-09-07     1000\n",
       "7           7  1000_7   415.70   2018-07-11     1000\n",
       "8           8  1000_8   505.40   2018-10-08     1000\n",
       "9           9  1000_9   345.54   2018-09-03     1000"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "internet = pd.read_csv('/datasets/internet.csv')\n",
    "internet.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 149396 entries, 0 to 149395\n",
      "Data columns (total 5 columns):\n",
      "Unnamed: 0      149396 non-null int64\n",
      "id              149396 non-null object\n",
      "mb_used         149396 non-null float64\n",
      "session_date    149396 non-null object\n",
      "user_id         149396 non-null int64\n",
      "dtypes: float64(1), int64(2), object(2)\n",
      "memory usage: 5.7+ MB\n"
     ]
    }
   ],
   "source": [
    "internet.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "internet.duplicated().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Вывод по данным internet\n",
    "1. Интернетом пользуются активно и много \n",
    "2. Необходимо заменить тип данных у session_date "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>message_date</th>\n",
       "      <th>user_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1000_0</td>\n",
       "      <td>2018-06-27</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1000_1</td>\n",
       "      <td>2018-10-08</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1000_2</td>\n",
       "      <td>2018-08-04</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1000_3</td>\n",
       "      <td>2018-06-16</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1000_4</td>\n",
       "      <td>2018-12-05</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>1000_5</td>\n",
       "      <td>2018-06-20</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>1000_6</td>\n",
       "      <td>2018-11-19</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>1000_7</td>\n",
       "      <td>2018-10-29</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>1000_8</td>\n",
       "      <td>2018-06-25</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>1000_9</td>\n",
       "      <td>2018-12-18</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id message_date  user_id\n",
       "0  1000_0   2018-06-27     1000\n",
       "1  1000_1   2018-10-08     1000\n",
       "2  1000_2   2018-08-04     1000\n",
       "3  1000_3   2018-06-16     1000\n",
       "4  1000_4   2018-12-05     1000\n",
       "5  1000_5   2018-06-20     1000\n",
       "6  1000_6   2018-11-19     1000\n",
       "7  1000_7   2018-10-29     1000\n",
       "8  1000_8   2018-06-25     1000\n",
       "9  1000_9   2018-12-18     1000"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "messages = pd.read_csv('/datasets/messages.csv')\n",
    "messages.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 123036 entries, 0 to 123035\n",
      "Data columns (total 3 columns):\n",
      "id              123036 non-null object\n",
      "message_date    123036 non-null object\n",
      "user_id         123036 non-null int64\n",
      "dtypes: int64(1), object(2)\n",
      "memory usage: 2.8+ MB\n"
     ]
    }
   ],
   "source": [
    "messages.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "messages.duplicated().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Вывод по данным messages\n",
    "1. Интересно, что в век онлайн месенджеров кто-то еще пользуется смс сообщениями\n",
    "2. Нужно бы замнить тип данных на дату у message_date    \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>rub_monthly_fee</th>\n",
       "      <th>rub_per_gb</th>\n",
       "      <th>rub_per_message</th>\n",
       "      <th>rub_per_minute</th>\n",
       "      <th>tariff_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>50</td>\n",
       "      <td>15360</td>\n",
       "      <td>500</td>\n",
       "      <td>550</td>\n",
       "      <td>200</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>smart</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>1950</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>ultra</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   messages_included  mb_per_month_included  minutes_included  \\\n",
       "0                 50                  15360               500   \n",
       "1               1000                  30720              3000   \n",
       "\n",
       "   rub_monthly_fee  rub_per_gb  rub_per_message  rub_per_minute tariff_name  \n",
       "0              550         200                3               3       smart  \n",
       "1             1950         150                1               1       ultra  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tariffs = pd.read_csv('/datasets/tariffs.csv')\n",
    "tariffs.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Вывод по данным tariffs\n",
    "1. Тариф ultra для активных пользователей \n",
    "2. Тариф smart больше подходит тем, кто редко пользуется мобильной связью,  \n",
    " так как превышение лимитов, установленных в тарифе, очень не выгодно\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>age</th>\n",
       "      <th>churn_date</th>\n",
       "      <th>city</th>\n",
       "      <th>first_name</th>\n",
       "      <th>last_name</th>\n",
       "      <th>reg_date</th>\n",
       "      <th>tariff</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1000</td>\n",
       "      <td>52</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>Рафаил</td>\n",
       "      <td>Верещагин</td>\n",
       "      <td>2018-05-25</td>\n",
       "      <td>ultra</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1001</td>\n",
       "      <td>41</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Москва</td>\n",
       "      <td>Иван</td>\n",
       "      <td>Ежов</td>\n",
       "      <td>2018-11-01</td>\n",
       "      <td>smart</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1002</td>\n",
       "      <td>59</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Стерлитамак</td>\n",
       "      <td>Евгений</td>\n",
       "      <td>Абрамович</td>\n",
       "      <td>2018-06-17</td>\n",
       "      <td>smart</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1003</td>\n",
       "      <td>23</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Москва</td>\n",
       "      <td>Белла</td>\n",
       "      <td>Белякова</td>\n",
       "      <td>2018-08-17</td>\n",
       "      <td>ultra</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1004</td>\n",
       "      <td>68</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Новокузнецк</td>\n",
       "      <td>Татьяна</td>\n",
       "      <td>Авдеенко</td>\n",
       "      <td>2018-05-14</td>\n",
       "      <td>ultra</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>1005</td>\n",
       "      <td>67</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Набережные Челны</td>\n",
       "      <td>Афанасий</td>\n",
       "      <td>Горлов</td>\n",
       "      <td>2018-01-25</td>\n",
       "      <td>smart</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>1006</td>\n",
       "      <td>21</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Ульяновск</td>\n",
       "      <td>Леонид</td>\n",
       "      <td>Ермолаев</td>\n",
       "      <td>2018-02-26</td>\n",
       "      <td>smart</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>1007</td>\n",
       "      <td>65</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Москва</td>\n",
       "      <td>Юна</td>\n",
       "      <td>Березина</td>\n",
       "      <td>2018-04-19</td>\n",
       "      <td>smart</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>1008</td>\n",
       "      <td>63</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Челябинск</td>\n",
       "      <td>Рустэм</td>\n",
       "      <td>Пономарёв</td>\n",
       "      <td>2018-12-19</td>\n",
       "      <td>smart</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>1009</td>\n",
       "      <td>24</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Пермь</td>\n",
       "      <td>Василиса</td>\n",
       "      <td>Блинова</td>\n",
       "      <td>2018-03-22</td>\n",
       "      <td>smart</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id  age churn_date              city first_name  last_name  \\\n",
       "0     1000   52        NaN         Краснодар     Рафаил  Верещагин   \n",
       "1     1001   41        NaN            Москва       Иван       Ежов   \n",
       "2     1002   59        NaN       Стерлитамак    Евгений  Абрамович   \n",
       "3     1003   23        NaN            Москва      Белла   Белякова   \n",
       "4     1004   68        NaN       Новокузнецк    Татьяна   Авдеенко   \n",
       "5     1005   67        NaN  Набережные Челны   Афанасий     Горлов   \n",
       "6     1006   21        NaN         Ульяновск     Леонид   Ермолаев   \n",
       "7     1007   65        NaN            Москва        Юна   Березина   \n",
       "8     1008   63        NaN         Челябинск     Рустэм  Пономарёв   \n",
       "9     1009   24        NaN             Пермь   Василиса    Блинова   \n",
       "\n",
       "     reg_date tariff  \n",
       "0  2018-05-25  ultra  \n",
       "1  2018-11-01  smart  \n",
       "2  2018-06-17  smart  \n",
       "3  2018-08-17  ultra  \n",
       "4  2018-05-14  ultra  \n",
       "5  2018-01-25  smart  \n",
       "6  2018-02-26  smart  \n",
       "7  2018-04-19  smart  \n",
       "8  2018-12-19  smart  \n",
       "9  2018-03-22  smart  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "users = pd.read_csv('/datasets/users.csv')\n",
    "users.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 500 entries, 0 to 499\n",
      "Data columns (total 8 columns):\n",
      "user_id       500 non-null int64\n",
      "age           500 non-null int64\n",
      "churn_date    38 non-null object\n",
      "city          500 non-null object\n",
      "first_name    500 non-null object\n",
      "last_name     500 non-null object\n",
      "reg_date      500 non-null object\n",
      "tariff        500 non-null object\n",
      "dtypes: int64(2), object(6)\n",
      "memory usage: 31.4+ KB\n"
     ]
    }
   ],
   "source": [
    "users.info(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "users.duplicated().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Вывод по данным users\n",
    "1. churn_date имеет пропуски - значит тариф еще действует\n",
    "2. Далее заменим тип данных у reg_date"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Вывод по первичному знакомству с данными\n",
    "1. На первый взгляд данные собраны и выгружены аккуратно и четко \n",
    "2. Дубликатов нет  \n",
    "3. Выборка небольшая -  всего 500 users\n",
    "4. Необходимо поменятьт тип данных - даты привести к нужному формату \n",
    "\n",
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='2.-bullet'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2. Подготовка данных"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Проверим на пропуски \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id           0\n",
       "call_date    0\n",
       "duration     0\n",
       "user_id      0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "calls.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Unnamed: 0      0\n",
       "id              0\n",
       "mb_used         0\n",
       "session_date    0\n",
       "user_id         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "internet.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "id              0\n",
       "message_date    0\n",
       "user_id         0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "messages.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "user_id         0\n",
       "age             0\n",
       "churn_date    462\n",
       "city            0\n",
       "first_name      0\n",
       "last_name       0\n",
       "reg_date        0\n",
       "tariff          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "users.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Вывод по поиску пропусков\n",
    "1. Как и писали ранее churn_date имеет пропуски - значит тариф еще действует  \n",
    " это 92,4% данных - поэтому оставим как есть и не будем удалять \n",
    "2. На дубликаты проверили в первом шаке - их неет, пропусков тоже больше не обнаужено \n",
    "3. Значения 0.00 - в calls - это возможно пропущенные вызовы или сброшенные звонки "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Заменим типы данных object в указаниях даты на тип данных даты"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 202607 entries, 0 to 202606\n",
      "Data columns (total 4 columns):\n",
      "id           202607 non-null object\n",
      "call_date    202607 non-null datetime64[ns]\n",
      "duration     202607 non-null float64\n",
      "user_id      202607 non-null int64\n",
      "dtypes: datetime64[ns](1), float64(1), int64(1), object(1)\n",
      "memory usage: 6.2+ MB\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 149396 entries, 0 to 149395\n",
      "Data columns (total 5 columns):\n",
      "Unnamed: 0      149396 non-null int64\n",
      "id              149396 non-null object\n",
      "mb_used         149396 non-null float64\n",
      "session_date    149396 non-null datetime64[ns]\n",
      "user_id         149396 non-null int64\n",
      "dtypes: datetime64[ns](1), float64(1), int64(2), object(1)\n",
      "memory usage: 5.7+ MB\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 123036 entries, 0 to 123035\n",
      "Data columns (total 3 columns):\n",
      "id              123036 non-null object\n",
      "message_date    123036 non-null datetime64[ns]\n",
      "user_id         123036 non-null int64\n",
      "dtypes: datetime64[ns](1), int64(1), object(1)\n",
      "memory usage: 2.8+ MB\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 500 entries, 0 to 499\n",
      "Data columns (total 8 columns):\n",
      "user_id       500 non-null int64\n",
      "age           500 non-null int64\n",
      "churn_date    38 non-null object\n",
      "city          500 non-null object\n",
      "first_name    500 non-null object\n",
      "last_name     500 non-null object\n",
      "reg_date      500 non-null datetime64[ns]\n",
      "tariff        500 non-null object\n",
      "dtypes: datetime64[ns](1), int64(2), object(5)\n",
      "memory usage: 31.4+ KB\n"
     ]
    }
   ],
   "source": [
    "calls['call_date'] = pd.to_datetime(calls['call_date'], format = '%Y-%m-%dT%H:%M:%S')\n",
    "internet['session_date'] = pd.to_datetime(internet['session_date'], format = '%Y-%m-%dT%H:%M:%S')\n",
    "messages['message_date'] = pd.to_datetime(messages['message_date'], format = '%Y-%m-%dT%H:%M:%S')\n",
    "users['reg_date'] = pd.to_datetime(users['reg_date'], format = '%Y-%m-%dT%H:%M:%S')\n",
    "\n",
    "\n",
    "calls.info()\n",
    "internet.info()\n",
    "messages.info()\n",
    "users.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Заменим тип данный в данных в messages у id"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 123036 entries, 0 to 123035\n",
      "Data columns (total 3 columns):\n",
      "id              123036 non-null int64\n",
      "message_date    123036 non-null datetime64[ns]\n",
      "user_id         123036 non-null int64\n",
      "dtypes: datetime64[ns](1), int64(2)\n",
      "memory usage: 2.8 MB\n"
     ]
    }
   ],
   "source": [
    "messages['id'] = pd.to_numeric(messages['id'], errors='ignore').astype('int')\n",
    "messages.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Округлим данные до целых"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "calls['duration'] = np.ceil(calls['duration'])\n",
    "internet['mb_used'] = np.ceil(internet['mb_used'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Найдем количество сделанных звонков и израсходованных минут разговора по месяцам.  \n",
    " 1. Добавим столбец с месяцем\n",
    " 2. Переименуем duration \n",
    " 3. Сгруппируем данные"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>call_date</th>\n",
       "      <th>duration</th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1000_0</td>\n",
       "      <td>2018-07-25</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1000</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1000_1</td>\n",
       "      <td>2018-08-17</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1000</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1000_2</td>\n",
       "      <td>2018-06-11</td>\n",
       "      <td>3.0</td>\n",
       "      <td>1000</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1000_3</td>\n",
       "      <td>2018-09-21</td>\n",
       "      <td>14.0</td>\n",
       "      <td>1000</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1000_4</td>\n",
       "      <td>2018-12-15</td>\n",
       "      <td>6.0</td>\n",
       "      <td>1000</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>1000_5</td>\n",
       "      <td>2018-11-02</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1000</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>1000_6</td>\n",
       "      <td>2018-10-18</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1000</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>1000_7</td>\n",
       "      <td>2018-08-22</td>\n",
       "      <td>19.0</td>\n",
       "      <td>1000</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>1000_8</td>\n",
       "      <td>2018-09-15</td>\n",
       "      <td>19.0</td>\n",
       "      <td>1000</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>1000_9</td>\n",
       "      <td>2018-08-15</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1000</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       id  call_date  duration  user_id  month\n",
       "0  1000_0 2018-07-25       0.0     1000      7\n",
       "1  1000_1 2018-08-17       0.0     1000      8\n",
       "2  1000_2 2018-06-11       3.0     1000      6\n",
       "3  1000_3 2018-09-21      14.0     1000      9\n",
       "4  1000_4 2018-12-15       6.0     1000     12\n",
       "5  1000_5 2018-11-02       0.0     1000     11\n",
       "6  1000_6 2018-10-18       0.0     1000     10\n",
       "7  1000_7 2018-08-22      19.0     1000      8\n",
       "8  1000_8 2018-09-15      19.0     1000      9\n",
       "9  1000_9 2018-08-15       0.0     1000      8"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "calls['month'] = calls['call_date'].dt.month\n",
    "calls.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "calls.rename(columns={'duration': 'calls_count'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>calls_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1000</td>\n",
       "      <td>5</td>\n",
       "      <td>159.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1000</td>\n",
       "      <td>6</td>\n",
       "      <td>172.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1000</td>\n",
       "      <td>7</td>\n",
       "      <td>340.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1000</td>\n",
       "      <td>8</td>\n",
       "      <td>408.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1000</td>\n",
       "      <td>9</td>\n",
       "      <td>466.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>1000</td>\n",
       "      <td>10</td>\n",
       "      <td>350.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>1000</td>\n",
       "      <td>11</td>\n",
       "      <td>338.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>1000</td>\n",
       "      <td>12</td>\n",
       "      <td>333.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>1001</td>\n",
       "      <td>11</td>\n",
       "      <td>430.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>1001</td>\n",
       "      <td>12</td>\n",
       "      <td>414.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id  month  calls_count\n",
       "0     1000      5        159.0\n",
       "1     1000      6        172.0\n",
       "2     1000      7        340.0\n",
       "3     1000      8        408.0\n",
       "4     1000      9        466.0\n",
       "5     1000     10        350.0\n",
       "6     1000     11        338.0\n",
       "7     1000     12        333.0\n",
       "8     1001     11        430.0\n",
       "9     1001     12        414.0"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "calls_data = calls.groupby(['user_id', 'month']).agg({'calls_count':'sum'}) \n",
    "calls_data = calls_data.reset_index()  \n",
    "calls_data.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Найдем количество отправленных сообщений по месяцам  \n",
    "1. Добавим столбец с месяцем\n",
    "2. Переименуем столбец id\n",
    "3. Сгруппируем данные"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>message_date</th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>10000</td>\n",
       "      <td>2018-06-27</td>\n",
       "      <td>1000</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>10001</td>\n",
       "      <td>2018-10-08</td>\n",
       "      <td>1000</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>10002</td>\n",
       "      <td>2018-08-04</td>\n",
       "      <td>1000</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>10003</td>\n",
       "      <td>2018-06-16</td>\n",
       "      <td>1000</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>10004</td>\n",
       "      <td>2018-12-05</td>\n",
       "      <td>1000</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>10005</td>\n",
       "      <td>2018-06-20</td>\n",
       "      <td>1000</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>10006</td>\n",
       "      <td>2018-11-19</td>\n",
       "      <td>1000</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>10007</td>\n",
       "      <td>2018-10-29</td>\n",
       "      <td>1000</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>10008</td>\n",
       "      <td>2018-06-25</td>\n",
       "      <td>1000</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>10009</td>\n",
       "      <td>2018-12-18</td>\n",
       "      <td>1000</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      id message_date  user_id  month\n",
       "0  10000   2018-06-27     1000      6\n",
       "1  10001   2018-10-08     1000     10\n",
       "2  10002   2018-08-04     1000      8\n",
       "3  10003   2018-06-16     1000      6\n",
       "4  10004   2018-12-05     1000     12\n",
       "5  10005   2018-06-20     1000      6\n",
       "6  10006   2018-11-19     1000     11\n",
       "7  10007   2018-10-29     1000     10\n",
       "8  10008   2018-06-25     1000      6\n",
       "9  10009   2018-12-18     1000     12"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "messages['month'] = messages['message_date'].dt.month\n",
    "messages.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "messages.rename(columns={'id': 'messages_count'}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>messages_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1000</td>\n",
       "      <td>5</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1000</td>\n",
       "      <td>6</td>\n",
       "      <td>60</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1000</td>\n",
       "      <td>7</td>\n",
       "      <td>75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1000</td>\n",
       "      <td>8</td>\n",
       "      <td>81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1000</td>\n",
       "      <td>9</td>\n",
       "      <td>57</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>1000</td>\n",
       "      <td>10</td>\n",
       "      <td>73</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>1000</td>\n",
       "      <td>11</td>\n",
       "      <td>58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>1000</td>\n",
       "      <td>12</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>1002</td>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>1002</td>\n",
       "      <td>7</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id  month  messages_count\n",
       "0     1000      5              22\n",
       "1     1000      6              60\n",
       "2     1000      7              75\n",
       "3     1000      8              81\n",
       "4     1000      9              57\n",
       "5     1000     10              73\n",
       "6     1000     11              58\n",
       "7     1000     12              70\n",
       "8     1002      6               4\n",
       "9     1002      7              11"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "message_data = messages.groupby(['user_id', 'month']).agg({'messages_count':'count'})\n",
    "message_data = message_data.reset_index()\n",
    "message_data.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Рассмотрим объем израсходованного интернет-трафика по месяцам\n",
    "1. Добавим столбец с месяцем\n",
    "2. Сгруппируем данные"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>id</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>session_date</th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1000_0</td>\n",
       "      <td>113.0</td>\n",
       "      <td>2018-11-25</td>\n",
       "      <td>1000</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1000_1</td>\n",
       "      <td>1053.0</td>\n",
       "      <td>2018-09-07</td>\n",
       "      <td>1000</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>1000_2</td>\n",
       "      <td>1198.0</td>\n",
       "      <td>2018-06-25</td>\n",
       "      <td>1000</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>1000_3</td>\n",
       "      <td>551.0</td>\n",
       "      <td>2018-08-22</td>\n",
       "      <td>1000</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>1000_4</td>\n",
       "      <td>303.0</td>\n",
       "      <td>2018-09-24</td>\n",
       "      <td>1000</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>1000_5</td>\n",
       "      <td>400.0</td>\n",
       "      <td>2018-10-02</td>\n",
       "      <td>1000</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>1000_6</td>\n",
       "      <td>541.0</td>\n",
       "      <td>2018-09-07</td>\n",
       "      <td>1000</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>1000_7</td>\n",
       "      <td>416.0</td>\n",
       "      <td>2018-07-11</td>\n",
       "      <td>1000</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>1000_8</td>\n",
       "      <td>506.0</td>\n",
       "      <td>2018-10-08</td>\n",
       "      <td>1000</td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>1000_9</td>\n",
       "      <td>346.0</td>\n",
       "      <td>2018-09-03</td>\n",
       "      <td>1000</td>\n",
       "      <td>9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0      id  mb_used session_date  user_id  month\n",
       "0           0  1000_0    113.0   2018-11-25     1000     11\n",
       "1           1  1000_1   1053.0   2018-09-07     1000      9\n",
       "2           2  1000_2   1198.0   2018-06-25     1000      6\n",
       "3           3  1000_3    551.0   2018-08-22     1000      8\n",
       "4           4  1000_4    303.0   2018-09-24     1000      9\n",
       "5           5  1000_5    400.0   2018-10-02     1000     10\n",
       "6           6  1000_6    541.0   2018-09-07     1000      9\n",
       "7           7  1000_7    416.0   2018-07-11     1000      7\n",
       "8           8  1000_8    506.0   2018-10-08     1000     10\n",
       "9           9  1000_9    346.0   2018-09-03     1000      9"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "internet['month'] = internet['session_date'].dt.month\n",
    "internet.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>mb_used</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1000</td>\n",
       "      <td>5</td>\n",
       "      <td>2256.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1000</td>\n",
       "      <td>6</td>\n",
       "      <td>23257.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1000</td>\n",
       "      <td>7</td>\n",
       "      <td>14016.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1000</td>\n",
       "      <td>8</td>\n",
       "      <td>14070.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1000</td>\n",
       "      <td>9</td>\n",
       "      <td>14581.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>1000</td>\n",
       "      <td>10</td>\n",
       "      <td>14717.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>1000</td>\n",
       "      <td>11</td>\n",
       "      <td>14768.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>1000</td>\n",
       "      <td>12</td>\n",
       "      <td>9827.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>1001</td>\n",
       "      <td>11</td>\n",
       "      <td>18452.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>1001</td>\n",
       "      <td>12</td>\n",
       "      <td>14053.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id  month  mb_used\n",
       "0     1000      5   2256.0\n",
       "1     1000      6  23257.0\n",
       "2     1000      7  14016.0\n",
       "3     1000      8  14070.0\n",
       "4     1000      9  14581.0\n",
       "5     1000     10  14717.0\n",
       "6     1000     11  14768.0\n",
       "7     1000     12   9827.0\n",
       "8     1001     11  18452.0\n",
       "9     1001     12  14053.0"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "internet_data = internet.groupby(['user_id', 'month']).agg({'mb_used':'sum'}) \n",
    "internet_data = internet_data.reset_index()\n",
    "internet_data.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Переименуем столбец tariff в таблице user  в tariff_name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "users.rename(columns={'tariff': 'tariff_name'}, inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Соединим все полученные таблички"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>calls_count</th>\n",
       "      <th>messages_count</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>age</th>\n",
       "      <th>churn_date</th>\n",
       "      <th>city</th>\n",
       "      <th>first_name</th>\n",
       "      <th>last_name</th>\n",
       "      <th>reg_date</th>\n",
       "      <th>tariff_name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1000</td>\n",
       "      <td>5.0</td>\n",
       "      <td>159.0</td>\n",
       "      <td>22.0</td>\n",
       "      <td>2256.0</td>\n",
       "      <td>52</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>Рафаил</td>\n",
       "      <td>Верещагин</td>\n",
       "      <td>2018-05-25</td>\n",
       "      <td>ultra</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1000</td>\n",
       "      <td>6.0</td>\n",
       "      <td>172.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>23257.0</td>\n",
       "      <td>52</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>Рафаил</td>\n",
       "      <td>Верещагин</td>\n",
       "      <td>2018-05-25</td>\n",
       "      <td>ultra</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1000</td>\n",
       "      <td>7.0</td>\n",
       "      <td>340.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>14016.0</td>\n",
       "      <td>52</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>Рафаил</td>\n",
       "      <td>Верещагин</td>\n",
       "      <td>2018-05-25</td>\n",
       "      <td>ultra</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1000</td>\n",
       "      <td>8.0</td>\n",
       "      <td>408.0</td>\n",
       "      <td>81.0</td>\n",
       "      <td>14070.0</td>\n",
       "      <td>52</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>Рафаил</td>\n",
       "      <td>Верещагин</td>\n",
       "      <td>2018-05-25</td>\n",
       "      <td>ultra</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1000</td>\n",
       "      <td>9.0</td>\n",
       "      <td>466.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>14581.0</td>\n",
       "      <td>52</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>Рафаил</td>\n",
       "      <td>Верещагин</td>\n",
       "      <td>2018-05-25</td>\n",
       "      <td>ultra</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>1000</td>\n",
       "      <td>10.0</td>\n",
       "      <td>350.0</td>\n",
       "      <td>73.0</td>\n",
       "      <td>14717.0</td>\n",
       "      <td>52</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>Рафаил</td>\n",
       "      <td>Верещагин</td>\n",
       "      <td>2018-05-25</td>\n",
       "      <td>ultra</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>1000</td>\n",
       "      <td>11.0</td>\n",
       "      <td>338.0</td>\n",
       "      <td>58.0</td>\n",
       "      <td>14768.0</td>\n",
       "      <td>52</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>Рафаил</td>\n",
       "      <td>Верещагин</td>\n",
       "      <td>2018-05-25</td>\n",
       "      <td>ultra</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>1000</td>\n",
       "      <td>12.0</td>\n",
       "      <td>333.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>9827.0</td>\n",
       "      <td>52</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>Рафаил</td>\n",
       "      <td>Верещагин</td>\n",
       "      <td>2018-05-25</td>\n",
       "      <td>ultra</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>1001</td>\n",
       "      <td>11.0</td>\n",
       "      <td>430.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>18452.0</td>\n",
       "      <td>41</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Москва</td>\n",
       "      <td>Иван</td>\n",
       "      <td>Ежов</td>\n",
       "      <td>2018-11-01</td>\n",
       "      <td>smart</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>1001</td>\n",
       "      <td>12.0</td>\n",
       "      <td>414.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14053.0</td>\n",
       "      <td>41</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Москва</td>\n",
       "      <td>Иван</td>\n",
       "      <td>Ежов</td>\n",
       "      <td>2018-11-01</td>\n",
       "      <td>smart</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>1002</td>\n",
       "      <td>6.0</td>\n",
       "      <td>117.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>10871.0</td>\n",
       "      <td>59</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Стерлитамак</td>\n",
       "      <td>Евгений</td>\n",
       "      <td>Абрамович</td>\n",
       "      <td>2018-06-17</td>\n",
       "      <td>smart</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>1002</td>\n",
       "      <td>7.0</td>\n",
       "      <td>214.0</td>\n",
       "      <td>11.0</td>\n",
       "      <td>17601.0</td>\n",
       "      <td>59</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Стерлитамак</td>\n",
       "      <td>Евгений</td>\n",
       "      <td>Абрамович</td>\n",
       "      <td>2018-06-17</td>\n",
       "      <td>smart</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>1002</td>\n",
       "      <td>8.0</td>\n",
       "      <td>289.0</td>\n",
       "      <td>13.0</td>\n",
       "      <td>20347.0</td>\n",
       "      <td>59</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Стерлитамак</td>\n",
       "      <td>Евгений</td>\n",
       "      <td>Абрамович</td>\n",
       "      <td>2018-06-17</td>\n",
       "      <td>smart</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>13</td>\n",
       "      <td>1002</td>\n",
       "      <td>9.0</td>\n",
       "      <td>206.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>16712.0</td>\n",
       "      <td>59</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Стерлитамак</td>\n",
       "      <td>Евгений</td>\n",
       "      <td>Абрамович</td>\n",
       "      <td>2018-06-17</td>\n",
       "      <td>smart</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>14</td>\n",
       "      <td>1002</td>\n",
       "      <td>10.0</td>\n",
       "      <td>212.0</td>\n",
       "      <td>10.0</td>\n",
       "      <td>13905.0</td>\n",
       "      <td>59</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Стерлитамак</td>\n",
       "      <td>Евгений</td>\n",
       "      <td>Абрамович</td>\n",
       "      <td>2018-06-17</td>\n",
       "      <td>smart</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    user_id  month  calls_count  messages_count  mb_used  age churn_date  \\\n",
       "0      1000    5.0        159.0            22.0   2256.0   52        NaN   \n",
       "1      1000    6.0        172.0            60.0  23257.0   52        NaN   \n",
       "2      1000    7.0        340.0            75.0  14016.0   52        NaN   \n",
       "3      1000    8.0        408.0            81.0  14070.0   52        NaN   \n",
       "4      1000    9.0        466.0            57.0  14581.0   52        NaN   \n",
       "5      1000   10.0        350.0            73.0  14717.0   52        NaN   \n",
       "6      1000   11.0        338.0            58.0  14768.0   52        NaN   \n",
       "7      1000   12.0        333.0            70.0   9827.0   52        NaN   \n",
       "8      1001   11.0        430.0             NaN  18452.0   41        NaN   \n",
       "9      1001   12.0        414.0             NaN  14053.0   41        NaN   \n",
       "10     1002    6.0        117.0             4.0  10871.0   59        NaN   \n",
       "11     1002    7.0        214.0            11.0  17601.0   59        NaN   \n",
       "12     1002    8.0        289.0            13.0  20347.0   59        NaN   \n",
       "13     1002    9.0        206.0             4.0  16712.0   59        NaN   \n",
       "14     1002   10.0        212.0            10.0  13905.0   59        NaN   \n",
       "\n",
       "           city first_name  last_name   reg_date tariff_name  \n",
       "0     Краснодар     Рафаил  Верещагин 2018-05-25       ultra  \n",
       "1     Краснодар     Рафаил  Верещагин 2018-05-25       ultra  \n",
       "2     Краснодар     Рафаил  Верещагин 2018-05-25       ultra  \n",
       "3     Краснодар     Рафаил  Верещагин 2018-05-25       ultra  \n",
       "4     Краснодар     Рафаил  Верещагин 2018-05-25       ultra  \n",
       "5     Краснодар     Рафаил  Верещагин 2018-05-25       ultra  \n",
       "6     Краснодар     Рафаил  Верещагин 2018-05-25       ultra  \n",
       "7     Краснодар     Рафаил  Верещагин 2018-05-25       ultra  \n",
       "8        Москва       Иван       Ежов 2018-11-01       smart  \n",
       "9        Москва       Иван       Ежов 2018-11-01       smart  \n",
       "10  Стерлитамак    Евгений  Абрамович 2018-06-17       smart  \n",
       "11  Стерлитамак    Евгений  Абрамович 2018-06-17       smart  \n",
       "12  Стерлитамак    Евгений  Абрамович 2018-06-17       smart  \n",
       "13  Стерлитамак    Евгений  Абрамович 2018-06-17       smart  \n",
       "14  Стерлитамак    Евгений  Абрамович 2018-06-17       smart  "
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "connection_c_m = calls_data.merge(message_data, on= ['user_id', 'month'], how='outer')\n",
    "connection_c_m_i = connection_c_m.merge(internet_data, on= ['user_id', 'month'], how='outer')\n",
    "connection_c_m_i_u = connection_c_m_i.merge(users, on= ['user_id'], how='outer')\n",
    "connection_c_m_i_u.head(15)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Соединив таблицы, получили пустые значения -  \n",
    " посмотрим их количество "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "user_id              0\n",
       "month                2\n",
       "calls_count         42\n",
       "messages_count     499\n",
       "mb_used             13\n",
       "age                  0\n",
       "churn_date        3027\n",
       "city                 0\n",
       "first_name           0\n",
       "last_name            0\n",
       "reg_date             0\n",
       "tariff_name          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "connection_c_m_i_u.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Какие могут быть причины пустых значений:  \n",
    "  1. month - техническая ошибка формирования даты\n",
    "  2. duration - если не было звонков, но были только смс , возможно поэтому есть пустые значения\n",
    "  3. id - абонент вообще не пользовался мобильной связью\n",
    "  4. mb_used - не было выходов в сеть \n",
    "  5. churn_date - тариф действующий  \n",
    "   Пустых значений ничтожно мало - поэтому\n",
    "   заменим на 0 все NaN , кроме churn_date"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "user_id              0\n",
       "month                0\n",
       "calls_count          0\n",
       "messages_count       0\n",
       "mb_used              0\n",
       "age                  0\n",
       "churn_date        3027\n",
       "city                 0\n",
       "first_name           0\n",
       "last_name            0\n",
       "reg_date             0\n",
       "tariff_name          0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "connection_c_m_i_u['month'] = connection_c_m_i_u['month'].fillna('0')\n",
    "connection_c_m_i_u['calls_count'] = connection_c_m_i_u['calls_count'].fillna('0')\n",
    "connection_c_m_i_u['messages_count'] = connection_c_m_i_u['messages_count'].fillna('0')\n",
    "connection_c_m_i_u['mb_used'] = connection_c_m_i_u['mb_used'].fillna('0')\n",
    "connection_c_m_i_u.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Напишем функцию, считающую помесячную выручку с каждого пользователя (вычтим бесплатный лимит из суммарного количества звонков, сообщений и интернет-трафика; остаток умножим на значение из тарифного плана; прибавим абонентскую плату, соответствующую тарифному плану)  \n",
    " Для начала присоединим к нашей таблице с трафиком и распределению по users данные из traffic"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>calls_count</th>\n",
       "      <th>messages_count</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>age</th>\n",
       "      <th>churn_date</th>\n",
       "      <th>city</th>\n",
       "      <th>first_name</th>\n",
       "      <th>last_name</th>\n",
       "      <th>reg_date</th>\n",
       "      <th>tariff_name</th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>rub_monthly_fee</th>\n",
       "      <th>rub_per_gb</th>\n",
       "      <th>rub_per_message</th>\n",
       "      <th>rub_per_minute</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1000</td>\n",
       "      <td>5</td>\n",
       "      <td>159</td>\n",
       "      <td>22</td>\n",
       "      <td>2256</td>\n",
       "      <td>52</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>Рафаил</td>\n",
       "      <td>Верещагин</td>\n",
       "      <td>2018-05-25</td>\n",
       "      <td>ultra</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>1950</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1000</td>\n",
       "      <td>6</td>\n",
       "      <td>172</td>\n",
       "      <td>60</td>\n",
       "      <td>23257</td>\n",
       "      <td>52</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>Рафаил</td>\n",
       "      <td>Верещагин</td>\n",
       "      <td>2018-05-25</td>\n",
       "      <td>ultra</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>1950</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1000</td>\n",
       "      <td>7</td>\n",
       "      <td>340</td>\n",
       "      <td>75</td>\n",
       "      <td>14016</td>\n",
       "      <td>52</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>Рафаил</td>\n",
       "      <td>Верещагин</td>\n",
       "      <td>2018-05-25</td>\n",
       "      <td>ultra</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>1950</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1000</td>\n",
       "      <td>8</td>\n",
       "      <td>408</td>\n",
       "      <td>81</td>\n",
       "      <td>14070</td>\n",
       "      <td>52</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>Рафаил</td>\n",
       "      <td>Верещагин</td>\n",
       "      <td>2018-05-25</td>\n",
       "      <td>ultra</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>1950</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1000</td>\n",
       "      <td>9</td>\n",
       "      <td>466</td>\n",
       "      <td>57</td>\n",
       "      <td>14581</td>\n",
       "      <td>52</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>Рафаил</td>\n",
       "      <td>Верещагин</td>\n",
       "      <td>2018-05-25</td>\n",
       "      <td>ultra</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>1950</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>1000</td>\n",
       "      <td>10</td>\n",
       "      <td>350</td>\n",
       "      <td>73</td>\n",
       "      <td>14717</td>\n",
       "      <td>52</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>Рафаил</td>\n",
       "      <td>Верещагин</td>\n",
       "      <td>2018-05-25</td>\n",
       "      <td>ultra</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>1950</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>1000</td>\n",
       "      <td>11</td>\n",
       "      <td>338</td>\n",
       "      <td>58</td>\n",
       "      <td>14768</td>\n",
       "      <td>52</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>Рафаил</td>\n",
       "      <td>Верещагин</td>\n",
       "      <td>2018-05-25</td>\n",
       "      <td>ultra</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>1950</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>1000</td>\n",
       "      <td>12</td>\n",
       "      <td>333</td>\n",
       "      <td>70</td>\n",
       "      <td>9827</td>\n",
       "      <td>52</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>Рафаил</td>\n",
       "      <td>Верещагин</td>\n",
       "      <td>2018-05-25</td>\n",
       "      <td>ultra</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>1950</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>1003</td>\n",
       "      <td>8</td>\n",
       "      <td>380</td>\n",
       "      <td>37</td>\n",
       "      <td>8571</td>\n",
       "      <td>23</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Москва</td>\n",
       "      <td>Белла</td>\n",
       "      <td>Белякова</td>\n",
       "      <td>2018-08-17</td>\n",
       "      <td>ultra</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>1950</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>1003</td>\n",
       "      <td>9</td>\n",
       "      <td>961</td>\n",
       "      <td>91</td>\n",
       "      <td>12479</td>\n",
       "      <td>23</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Москва</td>\n",
       "      <td>Белла</td>\n",
       "      <td>Белякова</td>\n",
       "      <td>2018-08-17</td>\n",
       "      <td>ultra</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>1950</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id month calls_count messages_count mb_used  age churn_date  \\\n",
       "0     1000     5         159             22    2256   52        NaN   \n",
       "1     1000     6         172             60   23257   52        NaN   \n",
       "2     1000     7         340             75   14016   52        NaN   \n",
       "3     1000     8         408             81   14070   52        NaN   \n",
       "4     1000     9         466             57   14581   52        NaN   \n",
       "5     1000    10         350             73   14717   52        NaN   \n",
       "6     1000    11         338             58   14768   52        NaN   \n",
       "7     1000    12         333             70    9827   52        NaN   \n",
       "8     1003     8         380             37    8571   23        NaN   \n",
       "9     1003     9         961             91   12479   23        NaN   \n",
       "\n",
       "        city first_name  last_name   reg_date tariff_name  messages_included  \\\n",
       "0  Краснодар     Рафаил  Верещагин 2018-05-25       ultra               1000   \n",
       "1  Краснодар     Рафаил  Верещагин 2018-05-25       ultra               1000   \n",
       "2  Краснодар     Рафаил  Верещагин 2018-05-25       ultra               1000   \n",
       "3  Краснодар     Рафаил  Верещагин 2018-05-25       ultra               1000   \n",
       "4  Краснодар     Рафаил  Верещагин 2018-05-25       ultra               1000   \n",
       "5  Краснодар     Рафаил  Верещагин 2018-05-25       ultra               1000   \n",
       "6  Краснодар     Рафаил  Верещагин 2018-05-25       ultra               1000   \n",
       "7  Краснодар     Рафаил  Верещагин 2018-05-25       ultra               1000   \n",
       "8     Москва      Белла   Белякова 2018-08-17       ultra               1000   \n",
       "9     Москва      Белла   Белякова 2018-08-17       ultra               1000   \n",
       "\n",
       "   mb_per_month_included  minutes_included  rub_monthly_fee  rub_per_gb  \\\n",
       "0                  30720              3000             1950         150   \n",
       "1                  30720              3000             1950         150   \n",
       "2                  30720              3000             1950         150   \n",
       "3                  30720              3000             1950         150   \n",
       "4                  30720              3000             1950         150   \n",
       "5                  30720              3000             1950         150   \n",
       "6                  30720              3000             1950         150   \n",
       "7                  30720              3000             1950         150   \n",
       "8                  30720              3000             1950         150   \n",
       "9                  30720              3000             1950         150   \n",
       "\n",
       "   rub_per_message  rub_per_minute  \n",
       "0                1               1  \n",
       "1                1               1  \n",
       "2                1               1  \n",
       "3                1               1  \n",
       "4                1               1  \n",
       "5                1               1  \n",
       "6                1               1  \n",
       "7                1               1  \n",
       "8                1               1  \n",
       "9                1               1  "
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "connection_c_m_i_u_t = connection_c_m_i_u.merge(tariffs, on= ['tariff_name'], how='outer')\n",
    "connection_c_m_i_u_t.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Проверим типы данных  \n",
    " Заменим calls_count messages_count mb_used на целочисленный тип данных  \n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 3216 entries, 0 to 3215\n",
      "Data columns (total 19 columns):\n",
      "user_id                  3216 non-null int64\n",
      "month                    3216 non-null int64\n",
      "calls_count              3216 non-null int64\n",
      "messages_count           3216 non-null int64\n",
      "mb_used                  3216 non-null int64\n",
      "age                      3216 non-null int64\n",
      "churn_date               189 non-null object\n",
      "city                     3216 non-null object\n",
      "first_name               3216 non-null object\n",
      "last_name                3216 non-null object\n",
      "reg_date                 3216 non-null datetime64[ns]\n",
      "tariff_name              3216 non-null object\n",
      "messages_included        3216 non-null int64\n",
      "mb_per_month_included    3216 non-null int64\n",
      "minutes_included         3216 non-null int64\n",
      "rub_monthly_fee          3216 non-null int64\n",
      "rub_per_gb               3216 non-null int64\n",
      "rub_per_message          3216 non-null int64\n",
      "rub_per_minute           3216 non-null int64\n",
      "dtypes: datetime64[ns](1), int64(13), object(5)\n",
      "memory usage: 502.5+ KB\n"
     ]
    }
   ],
   "source": [
    "connection_c_m_i_u_t['calls_count'] = pd.to_numeric(connection_c_m_i_u_t['calls_count'], errors='ignore').astype('int')\n",
    "connection_c_m_i_u_t['messages_count'] = pd.to_numeric(connection_c_m_i_u_t['messages_count'], errors='ignore').astype('int')\n",
    "connection_c_m_i_u_t['mb_used'] = pd.to_numeric(connection_c_m_i_u_t['mb_used'], errors='ignore').astype('int')\n",
    "connection_c_m_i_u_t['month'] = pd.to_numeric(connection_c_m_i_u_t['month'], errors='ignore').astype('int')\n",
    "connection_c_m_i_u_t.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>month</th>\n",
       "      <th>calls_count</th>\n",
       "      <th>messages_count</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>age</th>\n",
       "      <th>churn_date</th>\n",
       "      <th>city</th>\n",
       "      <th>first_name</th>\n",
       "      <th>last_name</th>\n",
       "      <th>reg_date</th>\n",
       "      <th>tariff_name</th>\n",
       "      <th>messages_included</th>\n",
       "      <th>mb_per_month_included</th>\n",
       "      <th>minutes_included</th>\n",
       "      <th>rub_monthly_fee</th>\n",
       "      <th>rub_per_gb</th>\n",
       "      <th>rub_per_message</th>\n",
       "      <th>rub_per_minute</th>\n",
       "      <th>month_revenue</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>1000</td>\n",
       "      <td>5</td>\n",
       "      <td>159</td>\n",
       "      <td>22</td>\n",
       "      <td>2256</td>\n",
       "      <td>52</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>Рафаил</td>\n",
       "      <td>Верещагин</td>\n",
       "      <td>2018-05-25</td>\n",
       "      <td>ultra</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>1950</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1000</td>\n",
       "      <td>6</td>\n",
       "      <td>172</td>\n",
       "      <td>60</td>\n",
       "      <td>23257</td>\n",
       "      <td>52</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>Рафаил</td>\n",
       "      <td>Верещагин</td>\n",
       "      <td>2018-05-25</td>\n",
       "      <td>ultra</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>1950</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>1000</td>\n",
       "      <td>7</td>\n",
       "      <td>340</td>\n",
       "      <td>75</td>\n",
       "      <td>14016</td>\n",
       "      <td>52</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>Рафаил</td>\n",
       "      <td>Верещагин</td>\n",
       "      <td>2018-05-25</td>\n",
       "      <td>ultra</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>1950</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>1000</td>\n",
       "      <td>8</td>\n",
       "      <td>408</td>\n",
       "      <td>81</td>\n",
       "      <td>14070</td>\n",
       "      <td>52</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>Рафаил</td>\n",
       "      <td>Верещагин</td>\n",
       "      <td>2018-05-25</td>\n",
       "      <td>ultra</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>1950</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>1000</td>\n",
       "      <td>9</td>\n",
       "      <td>466</td>\n",
       "      <td>57</td>\n",
       "      <td>14581</td>\n",
       "      <td>52</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>Рафаил</td>\n",
       "      <td>Верещагин</td>\n",
       "      <td>2018-05-25</td>\n",
       "      <td>ultra</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>1950</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>1000</td>\n",
       "      <td>10</td>\n",
       "      <td>350</td>\n",
       "      <td>73</td>\n",
       "      <td>14717</td>\n",
       "      <td>52</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>Рафаил</td>\n",
       "      <td>Верещагин</td>\n",
       "      <td>2018-05-25</td>\n",
       "      <td>ultra</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>1950</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>1000</td>\n",
       "      <td>11</td>\n",
       "      <td>338</td>\n",
       "      <td>58</td>\n",
       "      <td>14768</td>\n",
       "      <td>52</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>Рафаил</td>\n",
       "      <td>Верещагин</td>\n",
       "      <td>2018-05-25</td>\n",
       "      <td>ultra</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>1950</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>1000</td>\n",
       "      <td>12</td>\n",
       "      <td>333</td>\n",
       "      <td>70</td>\n",
       "      <td>9827</td>\n",
       "      <td>52</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Краснодар</td>\n",
       "      <td>Рафаил</td>\n",
       "      <td>Верещагин</td>\n",
       "      <td>2018-05-25</td>\n",
       "      <td>ultra</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>1950</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>1003</td>\n",
       "      <td>8</td>\n",
       "      <td>380</td>\n",
       "      <td>37</td>\n",
       "      <td>8571</td>\n",
       "      <td>23</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Москва</td>\n",
       "      <td>Белла</td>\n",
       "      <td>Белякова</td>\n",
       "      <td>2018-08-17</td>\n",
       "      <td>ultra</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>1950</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1950</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>1003</td>\n",
       "      <td>9</td>\n",
       "      <td>961</td>\n",
       "      <td>91</td>\n",
       "      <td>12479</td>\n",
       "      <td>23</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Москва</td>\n",
       "      <td>Белла</td>\n",
       "      <td>Белякова</td>\n",
       "      <td>2018-08-17</td>\n",
       "      <td>ultra</td>\n",
       "      <td>1000</td>\n",
       "      <td>30720</td>\n",
       "      <td>3000</td>\n",
       "      <td>1950</td>\n",
       "      <td>150</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1950</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id  month  calls_count  messages_count  mb_used  age churn_date  \\\n",
       "0     1000      5          159              22     2256   52        NaN   \n",
       "1     1000      6          172              60    23257   52        NaN   \n",
       "2     1000      7          340              75    14016   52        NaN   \n",
       "3     1000      8          408              81    14070   52        NaN   \n",
       "4     1000      9          466              57    14581   52        NaN   \n",
       "5     1000     10          350              73    14717   52        NaN   \n",
       "6     1000     11          338              58    14768   52        NaN   \n",
       "7     1000     12          333              70     9827   52        NaN   \n",
       "8     1003      8          380              37     8571   23        NaN   \n",
       "9     1003      9          961              91    12479   23        NaN   \n",
       "\n",
       "        city first_name  last_name   reg_date tariff_name  messages_included  \\\n",
       "0  Краснодар     Рафаил  Верещагин 2018-05-25       ultra               1000   \n",
       "1  Краснодар     Рафаил  Верещагин 2018-05-25       ultra               1000   \n",
       "2  Краснодар     Рафаил  Верещагин 2018-05-25       ultra               1000   \n",
       "3  Краснодар     Рафаил  Верещагин 2018-05-25       ultra               1000   \n",
       "4  Краснодар     Рафаил  Верещагин 2018-05-25       ultra               1000   \n",
       "5  Краснодар     Рафаил  Верещагин 2018-05-25       ultra               1000   \n",
       "6  Краснодар     Рафаил  Верещагин 2018-05-25       ultra               1000   \n",
       "7  Краснодар     Рафаил  Верещагин 2018-05-25       ultra               1000   \n",
       "8     Москва      Белла   Белякова 2018-08-17       ultra               1000   \n",
       "9     Москва      Белла   Белякова 2018-08-17       ultra               1000   \n",
       "\n",
       "   mb_per_month_included  minutes_included  rub_monthly_fee  rub_per_gb  \\\n",
       "0                  30720              3000             1950         150   \n",
       "1                  30720              3000             1950         150   \n",
       "2                  30720              3000             1950         150   \n",
       "3                  30720              3000             1950         150   \n",
       "4                  30720              3000             1950         150   \n",
       "5                  30720              3000             1950         150   \n",
       "6                  30720              3000             1950         150   \n",
       "7                  30720              3000             1950         150   \n",
       "8                  30720              3000             1950         150   \n",
       "9                  30720              3000             1950         150   \n",
       "\n",
       "   rub_per_message  rub_per_minute  month_revenue  \n",
       "0                1               1           1950  \n",
       "1                1               1           1950  \n",
       "2                1               1           1950  \n",
       "3                1               1           1950  \n",
       "4                1               1           1950  \n",
       "5                1               1           1950  \n",
       "6                1               1           1950  \n",
       "7                1               1           1950  \n",
       "8                1               1           1950  \n",
       "9                1               1           1950  "
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def total_revenue(connection_c_m_i_u_t):    \n",
    "    if connection_c_m_i_u_t['calls_count'] > connection_c_m_i_u_t['minutes_included']: \n",
    "        return (connection_c_m_i_u_t['calls_count'] - connection_c_m_i_u_t['minutes_included']) * connection_c_m_i_u_t['rub_per_minute'] + connection_c_m_i_u_t['rub_monthly_fee']\n",
    "    return connection_c_m_i_u_t['rub_monthly_fee'] \n",
    " \n",
    " \n",
    "    if connection_c_m_i_u_t['messages_count'] > connection_c_m_i_u_t['messages_included']: \n",
    "        return (connection_c_m_i_u_t['messages_count'] - connection_c_m_i_u_t['messages_included']) * connection_c_m_i_u_t['rub_per_message'] + connection_c_m_i_u_t['rub_monthly_fee']\n",
    "    return connection_c_m_i_u_t['rub_monthly_fee']\n",
    " \n",
    " \n",
    "    if connection_c_m_i_u_t['mb_used'] > connection_c_m_i_u_t['mb_per_month_included']: \n",
    "        return (connection_c_m_i_u_t['mb_used'] - connection_c_m_i_u_t['mb_per_month_included']) * connection_c_m_i_u_t['rub_per_gb'] / 1024 + connection_c_m_i_u_t['rub_monthly_fee']\n",
    "    return connection_c_m_i_u_t['rub_monthly_fee']\n",
    " \n",
    "connection_c_m_i_u_t['month_revenue'] = connection_c_m_i_u_t.apply(total_revenue, axis = 1) \n",
    "connection_c_m_i_u_t.head(10)\n",
    "\n",
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Вывод по подготовке данных \n",
    "1. Заменили типы данных\n",
    "2. Добавили новые столбцы\n",
    "3. Вычислили месячную выручку по каждому абоненту \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='3.-bullet'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3. Исследовательский анализ данных"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"2\" halign=\"left\">month_revenue</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th>count</th>\n",
       "      <th>sum</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>tariff_name</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>smart</td>\n",
       "      <td>2230</td>\n",
       "      <td>1504717</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>ultra</td>\n",
       "      <td>986</td>\n",
       "      <td>1922700</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            month_revenue         \n",
       "                    count      sum\n",
       "tariff_name                       \n",
       "smart                2230  1504717\n",
       "ultra                 986  1922700"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "users_data_pivot = connection_c_m_i_u_t.pivot_table(index=['tariff_name'], values = ['month_revenue'] , aggfunc =('count', 'sum'))\n",
    "users_data_pivot"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Определили, что тариф smart пользуется большей популярностью (более чем в два раза больше пользователей),  \n",
    " и все же при этом имеет меньший доход для оператора связи"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Рассмотрим подробнее тарифы "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "smart = connection_c_m_i_u_t.query('tariff_name in \"smart\"')\n",
    "ultra = connection_c_m_i_u_t.query('tariff_name in \"ultra\"')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>month</th>\n",
       "      <th>calls_count</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>messages_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>203.852941</td>\n",
       "      <td>8524.441176</td>\n",
       "      <td>18.235294</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>298.689655</td>\n",
       "      <td>11611.396552</td>\n",
       "      <td>24.086207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>390.051948</td>\n",
       "      <td>15123.857143</td>\n",
       "      <td>31.857143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>367.133929</td>\n",
       "      <td>13479.482143</td>\n",
       "      <td>30.741071</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>387.361702</td>\n",
       "      <td>15825.198582</td>\n",
       "      <td>33.773050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>395.640244</td>\n",
       "      <td>15814.768293</td>\n",
       "      <td>33.402439</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>408.353234</td>\n",
       "      <td>15763.512438</td>\n",
       "      <td>33.751244</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>421.468085</td>\n",
       "      <td>16632.174468</td>\n",
       "      <td>33.638298</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>428.611538</td>\n",
       "      <td>16324.526923</td>\n",
       "      <td>33.638462</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>426.136054</td>\n",
       "      <td>16778.564626</td>\n",
       "      <td>33.765306</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>435.265823</td>\n",
       "      <td>16917.531646</td>\n",
       "      <td>34.075949</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>478.560831</td>\n",
       "      <td>18136.833828</td>\n",
       "      <td>35.994065</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    month  calls_count       mb_used  messages_count\n",
       "0       0     0.000000      0.000000        0.000000\n",
       "1       1   203.852941   8524.441176       18.235294\n",
       "2       2   298.689655  11611.396552       24.086207\n",
       "3       3   390.051948  15123.857143       31.857143\n",
       "4       4   367.133929  13479.482143       30.741071\n",
       "5       5   387.361702  15825.198582       33.773050\n",
       "6       6   395.640244  15814.768293       33.402439\n",
       "7       7   408.353234  15763.512438       33.751244\n",
       "8       8   421.468085  16632.174468       33.638298\n",
       "9       9   428.611538  16324.526923       33.638462\n",
       "10     10   426.136054  16778.564626       33.765306\n",
       "11     11   435.265823  16917.531646       34.075949\n",
       "12     12   478.560831  18136.833828       35.994065"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "smart_month_table = smart.pivot_table(index='month', values=['calls_count', 'messages_count','mb_used'], aggfunc='mean').reset_index()\n",
    "smart_month_table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>month</th>\n",
       "      <th>calls_count</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>messages_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>428.111111</td>\n",
       "      <td>13153.555556</td>\n",
       "      <td>33.777778</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>297.125000</td>\n",
       "      <td>11786.958333</td>\n",
       "      <td>21.958333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>489.648649</td>\n",
       "      <td>17551.972973</td>\n",
       "      <td>32.297297</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>458.018182</td>\n",
       "      <td>16843.800000</td>\n",
       "      <td>31.563636</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>510.328358</td>\n",
       "      <td>19381.194030</td>\n",
       "      <td>37.850746</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>6</td>\n",
       "      <td>6</td>\n",
       "      <td>479.702381</td>\n",
       "      <td>18942.238095</td>\n",
       "      <td>41.726190</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>7</td>\n",
       "      <td>7</td>\n",
       "      <td>545.791209</td>\n",
       "      <td>20514.648352</td>\n",
       "      <td>49.846154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>8</td>\n",
       "      <td>8</td>\n",
       "      <td>510.775701</td>\n",
       "      <td>19594.065421</td>\n",
       "      <td>48.439252</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>9</td>\n",
       "      <td>9</td>\n",
       "      <td>539.443478</td>\n",
       "      <td>19222.208696</td>\n",
       "      <td>52.286957</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>10</td>\n",
       "      <td>10</td>\n",
       "      <td>558.081301</td>\n",
       "      <td>20063.869919</td>\n",
       "      <td>58.430894</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>11</td>\n",
       "      <td>11</td>\n",
       "      <td>541.380597</td>\n",
       "      <td>19805.313433</td>\n",
       "      <td>55.791045</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>12</td>\n",
       "      <td>12</td>\n",
       "      <td>592.805755</td>\n",
       "      <td>21813.589928</td>\n",
       "      <td>60.611511</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    month  calls_count       mb_used  messages_count\n",
       "0       0     0.000000      0.000000        0.000000\n",
       "1       1   428.111111  13153.555556       33.777778\n",
       "2       2   297.125000  11786.958333       21.958333\n",
       "3       3   489.648649  17551.972973       32.297297\n",
       "4       4   458.018182  16843.800000       31.563636\n",
       "5       5   510.328358  19381.194030       37.850746\n",
       "6       6   479.702381  18942.238095       41.726190\n",
       "7       7   545.791209  20514.648352       49.846154\n",
       "8       8   510.775701  19594.065421       48.439252\n",
       "9       9   539.443478  19222.208696       52.286957\n",
       "10     10   558.081301  20063.869919       58.430894\n",
       "11     11   541.380597  19805.313433       55.791045\n",
       "12     12   592.805755  21813.589928       60.611511"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ultra_month_table = ultra.pivot_table(index='month', values=['calls_count', 'messages_count','mb_used'], aggfunc='mean').reset_index()\n",
    "ultra_month_table"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Построим график зависимости звонков по месяцам для двух тарифов "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(9,4))\n",
    "months_index=np.arange(len(smart_month_table['month']))\n",
    "width = 0.4\n",
    "plt.bar(smart_month_table['month'], smart_month_table['calls_count'], width, alpha=0.6, color='b', label='smart')\n",
    "plt.bar(ultra_month_table['month']+width, ultra_month_table['calls_count'], width, alpha=0.6, color='g', label='ultra')\n",
    "plt.xticks(months_index)\n",
    "plt.ylabel('Длительность звонка в среднем, мин')\n",
    "plt.xlabel('Месяц')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#####  Вывод по графику распределения звонков между тарифами по месяцам\n",
    "1. Максимальное количество звонков приходится на декабрь \n",
    "2. Тариф ultra снижает свою популярность в феврале\n",
    "3. Распределение значений тарифа smart с марта весьма равномерно \n",
    "4. Распределение значений тарифа ultra нестабильно, и все же, по итогу, с положительной динамикой"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Построим график зависимости смс по месяцам для двух тарифов"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 648x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(9,4))\n",
    "months_index=np.arange(len(smart_month_table['month']))\n",
    "width = 0.4\n",
    "plt.bar(smart_month_table['month'], smart_month_table['messages_count'], width, alpha=0.6, color='b', label='smart')\n",
    "plt.bar(ultra_month_table['month']+width, ultra_month_table['messages_count'], width, alpha=0.6, color='g', label='ultra')\n",
    "plt.xticks(months_index)\n",
    "plt.ylabel('Количество сообщений, шт')\n",
    "plt.xlabel('Месяц')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#####  Вывод по графику распределения смс между тарифами по месяцам\n",
    "1. Максимальное количество смс приходится на декабрь \n",
    "2. Тариф ultra снижает свою популярность в феврале \n",
    "3. Тариф ultra борется за популярность в марте и апреле\n",
    "4. Распределение значений тарифа smart с марта весьма равномерно \n",
    "5. Распределение значений тарифа ultra нестабильно, и все же, по итогу, с положительной динамикой"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Построим график зависимости интернет-трафика по месяцам для двух тарифов"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.figure(figsize=(9,4))\n",
    "months_index=np.arange(len(smart_month_table['month']))\n",
    "width = 0.4\n",
    "plt.bar(smart_month_table['month'], smart_month_table['mb_used'], width, alpha=0.6, color='b', label='smart')\n",
    "plt.bar(ultra_month_table['month']+width, ultra_month_table['mb_used'], width, alpha=0.6, color='g', label='ultra')\n",
    "plt.xticks(months_index)\n",
    "plt.ylabel('Объем интернет трафика, мб')\n",
    "plt.xlabel('Месяц')\n",
    "plt.legend()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#####  Вывод по графику распределения интернет-трафика между тарифами по месяцам\n",
    "\n",
    "1. Максимальное количество трафика приходится на декабрь \n",
    "2. Тариф ultra резко теряет позиции в феврале \n",
    "3. Распределение значений тарифа smart с апреля вемьма равномерно, количественно вырастает к декабрю \n",
    "5. Распределение значений тарифа ultra нестабильно, и все же, по итогу, с положительной динамикой к декабрю"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "month\n",
      "Среднее: 6.0\n",
      "Дисперсия: 14.0\n",
      "Ст.отклонение: 3.7416573867739413\n",
      "calls_count\n",
      "Среднее: 357.0096911129416\n",
      "Дисперсия: 15039.770430940178\n",
      "Ст.отклонение: 122.63674176583532\n",
      "mb_used\n",
      "Среднее: 13917.86829357218\n",
      "Дисперсия: 22195827.364787675\n",
      "Ст.отклонение: 4711.244778695719\n",
      "messages_count\n",
      "Среднее: 28.996809841002044\n",
      "Дисперсия: 92.1058456961548\n",
      "Ст.отклонение: 9.597179048874455\n"
     ]
    }
   ],
   "source": [
    "def descriptive_stat(data):\n",
    "    columns = ['calls_count', 'messages_count', 'mb_used']\n",
    "    for column in data:\n",
    "        print(column)\n",
    "        print('Среднее:', data[column].mean())\n",
    "        print('Дисперсия:', np.var(data[column]))\n",
    "        print('Ст.отклонение:', np.sqrt(np.var(data[column])))\n",
    "descriptive_stat(smart_month_table)    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#####  Вывод по нахождению величин для тарифа smart\n",
    "\n",
    "1. В месяц получаем значение для звонков находятся рядом с 123 минутами\n",
    "2. Интернет-трафик имеет значение 4,6 Гб\n",
    "3. Смс отправлявляют наши абоненты в районе значения 10\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "month\n",
      "Среднее: 6.0\n",
      "Дисперсия: 14.0\n",
      "Ст.отклонение: 3.7416573867739413\n",
      "calls_count\n",
      "Среднее: 457.78551707304246\n",
      "Дисперсия: 22539.63034537405\n",
      "Ст.отклонение: 150.1320430333713\n",
      "mb_used\n",
      "Среднее: 16821.031902646504\n",
      "Дисперсия: 31136451.57178086\n",
      "Ст.отклонение: 5580.004621125404\n",
      "messages_count\n",
      "Среднее: 40.35229185366638\n",
      "Дисперсия: 264.1333546318216\n",
      "Ст.отклонение: 16.252179996290394\n"
     ]
    }
   ],
   "source": [
    "def descriptive_stat(data):\n",
    "    columns = ['calls_count', 'messages_count', 'mb_used']\n",
    "    for column in data:\n",
    "        print(column)\n",
    "        print('Среднее:', data[column].mean())\n",
    "        print('Дисперсия:', np.var(data[column]))\n",
    "        print('Ст.отклонение:', np.sqrt(np.var(data[column])))\n",
    "descriptive_stat(ultra_month_table)   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#####  Вывод по нахождению величин для тарифа ultra\n",
    "\n",
    "1. В месяц получаем значение для звонков находятся рядом с 150 минут\n",
    "2. Интернет-трафик имеет значение 5.4 Гб\n",
    "3. Смс отправлявляют наши абоненты в районе значения 16  \n",
    " \n",
    " Построим гистограмму , чтобы посмотреть распределения.  \n",
    "   Параметр range поставлю равным 800 так как в тарифе у нас заложено 500 минут и среднее достаточно высоко - значит есть перерасходы."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "smart_month_table.hist('calls_count', bins=12, range = (0, 800));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Видим, что максимальные значения заложены от 320 до 450. Проверим методом describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>month</th>\n",
       "      <th>calls_count</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>messages_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>13.00000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>13.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>6.00000</td>\n",
       "      <td>357.009691</td>\n",
       "      <td>13917.868294</td>\n",
       "      <td>28.996810</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>3.89444</td>\n",
       "      <td>127.644368</td>\n",
       "      <td>4903.619035</td>\n",
       "      <td>9.989061</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>3.00000</td>\n",
       "      <td>367.133929</td>\n",
       "      <td>13479.482143</td>\n",
       "      <td>30.741071</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>6.00000</td>\n",
       "      <td>395.640244</td>\n",
       "      <td>15814.768293</td>\n",
       "      <td>33.638298</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>9.00000</td>\n",
       "      <td>426.136054</td>\n",
       "      <td>16632.174468</td>\n",
       "      <td>33.765306</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>12.00000</td>\n",
       "      <td>478.560831</td>\n",
       "      <td>18136.833828</td>\n",
       "      <td>35.994065</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          month  calls_count       mb_used  messages_count\n",
       "count  13.00000    13.000000     13.000000       13.000000\n",
       "mean    6.00000   357.009691  13917.868294       28.996810\n",
       "std     3.89444   127.644368   4903.619035        9.989061\n",
       "min     0.00000     0.000000      0.000000        0.000000\n",
       "25%     3.00000   367.133929  13479.482143       30.741071\n",
       "50%     6.00000   395.640244  15814.768293       33.638298\n",
       "75%     9.00000   426.136054  16632.174468       33.765306\n",
       "max    12.00000   478.560831  18136.833828       35.994065"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "smart_month_table.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Гистограмма для параметра calls_count и данные метода describe() продемонстрировали схожие результаты.  \n",
    "     Посторим аналогичные гистограммы для тарифа smart по парметрам mb_used и messages_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "smart_month_table.hist('messages_count', bins=12, range = (0, 70));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Гистограмма для параметра messages_count также показывает схожесть с описанием -  \n",
    " максимальные занчение в районе значения 40, большинство значений попадает в промежуток от 29 до 41"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "smart_month_table.hist('mb_used', bins=12, range = (0, 30000));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Гистограмма для параметра mb_used также показывает схожесть с описанием -  \n",
    " максимальные занчение в районе значения 15000 - 17500"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Построим гистограммы для данный по тарифу ultra. Сравним данные гистограмм с данными метода describe()  \n",
    " параметр range будем задавать, исходя из данных, ранее расчитанных дисперсии и стандартного отклонения."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>month</th>\n",
       "      <th>calls_count</th>\n",
       "      <th>mb_used</th>\n",
       "      <th>messages_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>13.00000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>13.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>6.00000</td>\n",
       "      <td>457.785517</td>\n",
       "      <td>16821.031903</td>\n",
       "      <td>40.352292</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>3.89444</td>\n",
       "      <td>156.262385</td>\n",
       "      <td>5807.852948</td>\n",
       "      <td>16.915805</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>3.00000</td>\n",
       "      <td>458.018182</td>\n",
       "      <td>16843.800000</td>\n",
       "      <td>32.297297</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>6.00000</td>\n",
       "      <td>510.328358</td>\n",
       "      <td>19222.208696</td>\n",
       "      <td>41.726190</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>9.00000</td>\n",
       "      <td>541.380597</td>\n",
       "      <td>19805.313433</td>\n",
       "      <td>52.286957</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>12.00000</td>\n",
       "      <td>592.805755</td>\n",
       "      <td>21813.589928</td>\n",
       "      <td>60.611511</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          month  calls_count       mb_used  messages_count\n",
       "count  13.00000    13.000000     13.000000       13.000000\n",
       "mean    6.00000   457.785517  16821.031903       40.352292\n",
       "std     3.89444   156.262385   5807.852948       16.915805\n",
       "min     0.00000     0.000000      0.000000        0.000000\n",
       "25%     3.00000   458.018182  16843.800000       32.297297\n",
       "50%     6.00000   510.328358  19222.208696       41.726190\n",
       "75%     9.00000   541.380597  19805.313433       52.286957\n",
       "max    12.00000   592.805755  21813.589928       60.611511"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ultra_month_table.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ultra_month_table.hist('calls_count', bins=12, range = (0, 800));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как видим из описания средний показатель 457 , далее резкий скачок значений.  \n",
    " Максимальные значения от 457 до 600"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ultra_month_table.hist('messages_count', bins=12, range = (0, 120));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "По гистограмме значений по messages_count получаем максимум от 30 до 40 и уверенно много значений до 60"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "ultra_month_table.hist('mb_used', bins=12, range = (0, 35000));"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "По интернет трафику тарифа ultra видим, максимум приходится на объем в 17000 - 21000 mb"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#####  Общий вывод по анализу данных\n",
    "\n",
    "1. Тариф smart более популярный - количество абонентов с этим тарифом более чем в два раза  \n",
    " превыщает количество абонентов с тарифом ultra\n",
    "2. Выручка с тарифа ultra почти на 28% выше, чем у тарифа smart - это по году \n",
    "3. Распределение трафика услуг неравномерно - звонков больше, чем сообщений, и все же меньше чем интернет-трафика\n",
    "4. Для обоих тарифов характерно:  \n",
    " - Снижение активности в феврале\n",
    " - Нестабильный рост по ходу года\n",
    " - Максимальные значения в декабре\n",
    "5. После посторенния гистограмм и анализа данных описательного метода,  \n",
    " а так же по определению диспресии,среднего и стандартного отклонения можносделать вывод,  \n",
    "  что объемы трафиков, заложенные в тариф smart, используются наиболее полно,  а значит возможны пересраходы,  \n",
    "   что привлечет за собой выгоду для оператора. Пример : объем трафика в тарифе smart 15 gb - тратим 14,6 gb \n",
    "    и аналогичная метрика (олько по верхнему краю) в тарифе smart 30 gb против 20,5 gb реально используемых.\n",
    "6. Преполагаю, что распределение нормальное - так как имеем пиковые значения и ниспадающие \n",
    " "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='4.-bullet'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###  4. Проверим гипотезы"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='4.1-bullet'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 4.1 Средняя выручка пользователей тарифов «Ультра» и «Смарт» различается"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Проверим слеующие гипотезы :\n",
    "1. Средняя выручка пользователей тарифов «Ультра» и «Смарт» различается;\n",
    "2. Средняя выручка пользователей из Москвы отличается от выручки пользователей из других регионов;"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 550,  868, 1186,  835,  886,  757,  907, 1219,  691,  826,  685,\n",
       "        781, 1015,  790,  556,  595,  940,  553,  718, 1072,  586,  721,\n",
       "        706,  694,  592, 1009,  739,  559,  655,  643,  919,  598,  877,\n",
       "       1087, 1723, 1045,  736,  613,  571, 1240,  697,  874,  712,  640,\n",
       "       1057, 1633, 1234,  661,  562,  715, 1336, 1516,  601, 1168, 1498,\n",
       "       1768, 1096, 1627,  742, 1261,  631,  931,  865, 1066, 1174, 1012,\n",
       "        703,  724,  604,  841, 1210, 1153, 1063, 1165, 1213, 1222,  748,\n",
       "        808, 1228,  967,  814, 1354,  733,  769,  667,  616, 1195,  811,\n",
       "       1069, 1105,  949,  916,  775,  901,  853,  649,  646,  637,  634,\n",
       "        622,  844,  673,  751, 1108, 1402,  871,  859,  730,  784,  676,\n",
       "        565,  880,  577,  580,  850, 1618, 1525, 1417, 1579, 1840,  670,\n",
       "        961,  709,  682,  664,  754,  610,  679, 1405,  934, 1126,  964,\n",
       "       1180, 1006, 1306,  796, 1093, 1567, 1291, 1348,  793,  928,  802,\n",
       "        589,  805,  688, 1162,  823, 1342,  994,  799, 1120,  838,  628,\n",
       "        766,  763,  619,  574,  952,  922, 1252, 1159, 1132,  988,  970,\n",
       "       1018, 1315, 2050, 1573, 1483,  847,  985, 1048,  862,  607,  760,\n",
       "        883,  787,  943,  658,  817,  889, 1054, 1027,  700, 1201,  976,\n",
       "        895,  937, 1303, 1138,  583, 1075, 1720, 1090,  856,  913, 1135,\n",
       "       3355,  727, 1003,  820, 1243,  910, 1144,  778, 2116, 1033, 1039,\n",
       "        772,  982, 1675, 1270, 1051, 1231,  958, 1474, 1036, 1267, 1198,\n",
       "       1669, 1666, 1264, 2272, 1081, 1246, 1183, 1366, 1411, 1177, 1387,\n",
       "       1225, 1294, 1558, 1759,  979, 1192,  625, 1024, 1609, 1942,  745,\n",
       "       1363, 1084,  973, 1237, 2065, 1654, 1321, 1207, 1396, 1564, 1312,\n",
       "       1765,  892, 1030, 1273,  904, 1171,  568, 1021, 1300, 1309,  955,\n",
       "       1588, 1249, 1429,  997, 1216, 1510, 1150, 1000, 1945, 1333, 2482,\n",
       "       1318, 1717,  652, 1912, 1849, 1684,  898, 1258,  925, 1441, 1447,\n",
       "       1645, 1123, 2071, 1393,  832])"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "smart_rev = smart['month_revenue'].unique()\n",
    "ultra_rev = ultra['month_revenue'].unique()\n",
    "smart_rev"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Через unique() мы увидели, что переплата в тарифе smart есть -  \n",
    " поэтому возможно, что выручки равны.  \n",
    "  Посмотрим дисперсию"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "149903.23881390158"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.var(smart_rev)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.var(ultra_rev)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Дисперсия по ultra_rev = 0 так как значения в ней постоянны, а вот дисперсия smart_rev имеет различный набор данных.  \n",
    " Посмотрим отклонение"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "387.17339631475403"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sqrt(np.var(smart_rev))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В данном тесте мы используем статистический критерий Стьюдента, \n",
    "потому что данные у нас количественные, распределение нормальное, сравниваем две выборки, выборки независимые.  \n",
    " equal_var=False ак как дисперсию считаем из разных совокупностей данных и дисперсии крайне различны."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy import stats as st"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/numpy/core/fromnumeric.py:3622: RuntimeWarning: Degrees of freedom <= 0 for slice\n",
      "  **kwargs)\n",
      "/opt/conda/lib/python3.7/site-packages/numpy/core/_methods.py:226: RuntimeWarning: invalid value encountered in double_scalars\n",
      "  ret = ret.dtype.type(ret / rcount)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "Ttest_indResult(statistic=nan, pvalue=nan)"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "st.ttest_ind(smart_rev, ultra_rev, equal_var=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-значение: nan\n",
      "Не получилось отвергнуть нулевую гипотезу\n"
     ]
    }
   ],
   "source": [
    "alpha = 0.05\n",
    "\n",
    "results = st.ttest_ind(\n",
    "    smart_rev, \n",
    "    ultra_rev)\n",
    "print('p-значение:', results.pvalue)\n",
    "\n",
    "if (results.pvalue < alpha):\n",
    "    print(\"Отвергаем нулевую гипотезу\")\n",
    "else:\n",
    "    print(\"Не получилось отвергнуть нулевую гипотезу\") "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#####  Вывод по первой гипотезе \n",
    "Выручки не равны у разных тарифов "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='4.2-bullet'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### 4.2 Средняя выручка пользователей из Москвы отличается от выручки пользователей из других регионов"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "moscow_ab = connection_c_m_i_u_t.query('city == \"Москва\"')\n",
    "other_ab = connection_c_m_i_u_t.query('city != \"Москва\"')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1950,  550,  868, 1186,  835,  886,  757,  907, 1219,  691,  826,\n",
       "        556,  595,  940,  553,  718,  781, 1072,  586,  721,  706,  694,\n",
       "        592, 1009,  739,  559,  655,  643,  919,  598,  877, 1087, 1723,\n",
       "        613,  571, 1240,  697,  874,  712,  640, 1057, 1234,  661,  562,\n",
       "        685,  715, 1336, 1516, 1168, 1498, 1768, 1096, 1627,  742, 1261,\n",
       "        631,  931,  865, 1066, 1174, 1012,  703,  724,  604,  841, 1210,\n",
       "       1153, 1063, 1165, 1213, 1222,  748,  808, 1228,  967,  814, 1354,\n",
       "       1195,  811, 1069,  667, 1105,  901,  853,  601,  649,  790,  646,\n",
       "        637,  634,  622,  844,  673,  751,  676,  565,  880,  577,  733,\n",
       "        580,  850, 1618, 1525, 1417, 1579, 1840,  670,  961,  709,  784,\n",
       "        682,  664,  775,  616,  610,  679, 1405,  934, 1126,  964, 1180,\n",
       "       1306,  796, 1093, 1567, 1291, 1348,  793,  928,  802,  589,  805,\n",
       "        688, 1162,  823, 1342,  994,  799, 1120,  838,  736,  628,  766,\n",
       "        763,  619,  574,  952,  922, 1252, 1159, 1315, 2050, 1573, 1483,\n",
       "        847,  985, 1048,  862,  607,  859,  760,  787,  943,  658,  769,\n",
       "        817,  889, 1054, 1027,  730,  700, 1201,  754,  976,  895,  937,\n",
       "       1303, 1138,  583, 1075, 1720, 1090,  856,  913, 1135, 3355,  727,\n",
       "        871, 1003,  820, 1243,  910, 1144,  883,  778, 1033, 1039, 1036,\n",
       "        916, 1264, 2272, 1081, 1246, 1183, 1366, 1411,  958, 1177, 1387,\n",
       "       1225, 1018, 1294, 1558, 1759,  979, 1192,  625, 1024, 1609, 1942,\n",
       "        745, 1363, 1237, 2065, 1654, 1321, 1207, 1396, 1564, 1312, 1765,\n",
       "        892, 1030,  904, 1171, 1051,  568,  772, 1300, 1309,  955, 1588,\n",
       "       1249, 1015, 1429,  997, 1216, 1510,  988, 1150, 1231, 1000, 1945,\n",
       "       1333, 2482, 1318, 1717,  652, 1912, 1849, 1684, 1132,  898, 1258,\n",
       "        925, 1441, 1447,  970, 1108, 1402, 1645, 1123, 2071, 1393,  832])"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "moscow_ab_rev = moscow_ab['month_revenue'].unique()\n",
    "other_ab_rev = other_ab['month_revenue'].unique()\n",
    "other_ab_rev"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "География оператора связи обширна, и в общем по стране людей больше, чем в Москве.  \n",
    " Но оператор представлен не везде, да и есть конукуренция  \n",
    "  Нулевой будем считать гипотезу, что выручка в регионах и а Москве равные  \n",
    "   Посмотрим дисперсию выборок"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "415908.5130651637"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.var(moscow_ab['month_revenue'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "382855.48359459324"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.var(other_ab['month_revenue'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Поcмотрим стандартное отклонение по выборкам"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "644.9096937286365"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sqrt(np.var(moscow_ab['month_revenue']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "618.7531685531745"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.sqrt(np.var(other_ab['month_revenue']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Стандартное отклонение в Москве выше, чем в регионах."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "В данном тесте мы используем статистический критерий Стьюдента, \n",
    "потому что данные у нас количественные, распределение нормальное, сравниваем две выборки, выборки независимые.  \n",
    " equal_var=False ак как дисперсию считаем из разных совокупностей данных и дисперсии не близки по значениям."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Ttest_indResult(statistic=3.19825997047763, pvalue=0.0014313585749557152)"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "st.ttest_ind(moscow_ab_rev, other_ab_rev, equal_var=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-значение: 0.0010391847912997485\n",
      "Отвергаем нулевую гипотезу\n"
     ]
    }
   ],
   "source": [
    "alpha = 0.05\n",
    "\n",
    "results = st.ttest_ind(\n",
    "    moscow_ab_rev, \n",
    "    other_ab_rev)\n",
    "print('p-значение:', results.pvalue)\n",
    "\n",
    "if (results.pvalue < alpha):\n",
    "    print(\"Отвергаем нулевую гипотезу\")\n",
    "else:\n",
    "    print(\"Не получилось отвергнуть нулевую гипотезу\") "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#####  Вывод по второй гипотезе \n",
    "Средняя выручка пользователей из Москвы отличается от выручки пользователей из других регионов"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<a id='5.-bullet'></a>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 5. Общие выводы"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Проанализировав данные, мы заметили ряд интересных моментов:\n",
    "\n",
    "1. Пользовательская активность повышается в декабре и снижается резко в январе, особенно феврале -  \n",
    " предположу, что это связано с тем, что в конце года решается максимум вопросов  \n",
    "  (годовые отчетности, согласования бюдежтов на следующий год, поздравления партнеров/друзей/родных с наступающими праздниками, \n",
    "   записи к врачам на плановые обследования и тп).  \n",
    "    В начале года период принятия(стресса от расходов на праздники) и раскачивания перед началом бизнес-активности в марте \n",
    "2. Сравнивая тарифные планы мы выяснили, что бОльшую выручку приносит тарифный план ultra, при этом большее количество абонентов у тарифного плана smart\n",
    "3. Трафик (звонки, смс, интернет) по тарифным планам более равномерный у тарифа smart и  \n",
    " более резкие перепады у тарифного плана ultra - и все же динамика положительная к концу года \n",
    "4. Также из более детального анализа трафика - можно сделать выводы:  \n",
    " - бОльшая доля используемого трафика приходится на интернет-трафик  \n",
    "  по значениям стандарного отклонения мы видим, что заложенные в тарифе Гб используются  \n",
    "   на треть у тарифа smart и лишь 6я часть у тарифа ultra\n",
    " - на тарифном плане smart при расчете стандартного отклонения мы видим, что заложенных 50 минут абонентам недостаточно  \n",
    "  так как значения потраченных минут почти в 3 раза больше и равно 123.  \n",
    "  - соотношение потраченных смс у тарифа smart - это 20% от предложенных оператором,  \n",
    "   в то время как количество потраченных смс в тарифе ultra 1,6%\n",
    "5. По сравнению двух тарифных планов можно сделать вывод , что тариф ultra выбирают те,  \n",
    " кто много разговаривает и болится выйти из лимита, а так же имеет доход выше, чем те, кто пользуется тарифом smart.  \n",
    "  При этому у пользователей тарифа smart есть частые переплаты за перерасход лимитов, особенно по звонкам.\n",
    "  \n",
    "  #####  Рекомендации \n",
    "  Целью данного анализа являлся ответ на вопрос: рекламную компанию для какого тарифного плана следует профинансировать.  \n",
    "  Выдвину предположение, что спонсирование тарифа smart более выгодно, по ряду причин:\n",
    "  \n",
    "  1. Не все готовы тратить на тариф почти в 3 раза больше (1950 р против 550р)\n",
    "  2. Конкурентноспособное предложение способно повысить охват аудитории.  \n",
    "   В условиях жесткой конкуренции на рынке сотовых операторов повышении цены без улучшения качества связи - провальная история\n",
    "  3. Наценка за перерасходы лимита в тарифе smart выше, соответственно выручка будет расти при перерасходах \n",
    "  4. Для представления более конкурентного предложения - если взять за основу расчеты выше - то можно придумать услугу - неизрасходованные смс переводить в Гб на тарифе smart - тогда получается, что оператор не теряет выгоду от перерасходов по звонкам и абонент будет доволен увеличением Гб, которые он итак активно использует - то есть возможет перерасход и здесь, опять же выгода для оператора.\n",
    "  \n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "ExecuteTimeLog": [
   {
    "duration": 404,
    "start_time": "2021-07-01T13:08:56.465Z"
   },
   {
    "duration": 863,
    "start_time": "2021-07-01T13:09:01.771Z"
   },
   {
    "duration": 3,
    "start_time": "2021-07-01T13:09:02.637Z"
   },
   {
    "duration": 237,
    "start_time": "2021-07-01T13:09:02.644Z"
   },
   {
    "duration": 27,
    "start_time": "2021-07-01T13:09:02.884Z"
   },
   {
    "duration": 157,
    "start_time": "2021-07-01T13:09:02.913Z"
   },
   {
    "duration": 181,
    "start_time": "2021-07-01T13:09:03.072Z"
   },
   {
    "duration": 26,
    "start_time": "2021-07-01T13:09:03.255Z"
   },
   {
    "duration": 124,
    "start_time": "2021-07-01T13:09:03.285Z"
   },
   {
    "duration": 126,
    "start_time": "2021-07-01T13:09:03.412Z"
   },
   {
    "duration": 18,
    "start_time": "2021-07-01T13:09:03.540Z"
   },
   {
    "duration": 58,
    "start_time": "2021-07-01T13:09:03.568Z"
   },
   {
    "duration": 41,
    "start_time": "2021-07-01T13:09:03.628Z"
   },
   {
    "duration": 74,
    "start_time": "2021-07-01T13:09:03.671Z"
   },
   {
    "duration": 9,
    "start_time": "2021-07-01T13:09:03.747Z"
   },
   {
    "duration": 14,
    "start_time": "2021-07-01T13:09:03.759Z"
   },
   {
    "duration": 30,
    "start_time": "2021-07-01T13:09:03.775Z"
   },
   {
    "duration": 23,
    "start_time": "2021-07-01T13:09:03.808Z"
   },
   {
    "duration": 39,
    "start_time": "2021-07-01T13:09:03.833Z"
   },
   {
    "duration": 7,
    "start_time": "2021-07-01T13:09:03.874Z"
   },
   {
    "duration": 157,
    "start_time": "2021-07-01T13:09:03.883Z"
   },
   {
    "duration": 35,
    "start_time": "2021-07-01T13:09:04.043Z"
   },
   {
    "duration": 5,
    "start_time": "2021-07-01T13:09:04.081Z"
   },
   {
    "duration": 61,
    "start_time": "2021-07-01T13:09:04.092Z"
   },
   {
    "duration": 24,
    "start_time": "2021-07-01T13:09:04.156Z"
   },
   {
    "duration": 41,
    "start_time": "2021-07-01T13:09:04.183Z"
   },
   {
    "duration": 50,
    "start_time": "2021-07-01T13:09:04.226Z"
   },
   {
    "duration": 8,
    "start_time": "2021-07-01T13:09:04.278Z"
   },
   {
    "duration": 22,
    "start_time": "2021-07-01T13:09:04.288Z"
   },
   {
    "duration": 60,
    "start_time": "2021-07-01T13:09:04.312Z"
   },
   {
    "duration": 29,
    "start_time": "2021-07-01T13:09:04.374Z"
   },
   {
    "duration": 5,
    "start_time": "2021-07-01T13:09:04.406Z"
   },
   {
    "duration": 85,
    "start_time": "2021-07-01T13:09:04.414Z"
   },
   {
    "duration": 9,
    "start_time": "2021-07-01T13:09:04.502Z"
   },
   {
    "duration": 30,
    "start_time": "2021-07-01T13:09:04.513Z"
   },
   {
    "duration": 48,
    "start_time": "2021-07-01T13:09:04.545Z"
   },
   {
    "duration": 20,
    "start_time": "2021-07-01T13:09:04.595Z"
   },
   {
    "duration": 217,
    "start_time": "2021-07-01T13:09:04.618Z"
   },
   {
    "duration": 51,
    "start_time": "2021-07-01T13:09:04.838Z"
   },
   {
    "duration": 14,
    "start_time": "2021-07-01T13:09:04.892Z"
   },
   {
    "duration": 44,
    "start_time": "2021-07-01T13:09:04.909Z"
   },
   {
    "duration": 32,
    "start_time": "2021-07-01T13:09:04.956Z"
   },
   {
    "duration": 125,
    "start_time": "2021-07-01T13:09:04.991Z"
   },
   {
    "duration": 408,
    "start_time": "2021-07-01T13:09:05.118Z"
   },
   {
    "duration": 421,
    "start_time": "2021-07-01T13:09:05.528Z"
   },
   {
    "duration": 441,
    "start_time": "2021-07-01T13:09:05.952Z"
   },
   {
    "duration": 15,
    "start_time": "2021-07-01T13:09:06.395Z"
   },
   {
    "duration": 17,
    "start_time": "2021-07-01T13:09:06.413Z"
   },
   {
    "duration": 357,
    "start_time": "2021-07-01T13:09:06.432Z"
   },
   {
    "duration": 30,
    "start_time": "2021-07-01T13:09:06.792Z"
   },
   {
    "duration": 315,
    "start_time": "2021-07-01T13:09:06.825Z"
   },
   {
    "duration": 329,
    "start_time": "2021-07-01T13:09:07.142Z"
   },
   {
    "duration": 28,
    "start_time": "2021-07-01T13:09:07.474Z"
   },
   {
    "duration": 431,
    "start_time": "2021-07-01T13:09:07.504Z"
   },
   {
    "duration": 331,
    "start_time": "2021-07-01T13:09:07.937Z"
   },
   {
    "duration": 327,
    "start_time": "2021-07-01T13:09:08.270Z"
   },
   {
    "duration": 8,
    "start_time": "2021-07-01T13:09:08.599Z"
   },
   {
    "duration": 9,
    "start_time": "2021-07-01T13:09:08.609Z"
   },
   {
    "duration": 8,
    "start_time": "2021-07-01T13:09:08.620Z"
   },
   {
    "duration": 37,
    "start_time": "2021-07-01T13:09:08.630Z"
   },
   {
    "duration": 539,
    "start_time": "2021-07-01T13:09:08.670Z"
   },
   {
    "duration": 9,
    "start_time": "2021-07-01T13:09:09.211Z"
   },
   {
    "duration": 8,
    "start_time": "2021-07-01T13:09:09.223Z"
   },
   {
    "duration": 38,
    "start_time": "2021-07-01T13:09:09.234Z"
   },
   {
    "duration": 29,
    "start_time": "2021-07-01T13:09:09.275Z"
   },
   {
    "duration": 9,
    "start_time": "2021-07-01T13:09:09.306Z"
   },
   {
    "duration": 7,
    "start_time": "2021-07-01T13:09:09.318Z"
   },
   {
    "duration": 43,
    "start_time": "2021-07-01T13:09:09.328Z"
   },
   {
    "duration": 10,
    "start_time": "2021-07-01T13:09:09.380Z"
   },
   {
    "duration": 10,
    "start_time": "2021-07-01T13:09:09.392Z"
   },
   {
    "duration": 10,
    "start_time": "2021-07-01T13:09:09.405Z"
   },
   {
    "duration": 8,
    "start_time": "2021-07-01T13:10:49.844Z"
   }
  ],
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.8"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": false,
   "sideBar": true,
   "skip_h1_title": true,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": true
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
